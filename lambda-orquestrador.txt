// Orquestrador de Respostas
// Este Lambda processa mensagens da fila SQS, determina o tipo de resposta necess√°ria
// e coordena a gera√ß√£o de conte√∫do personalizado

const AWS = require('aws-sdk');
const { v4: uuidv4 } = require('uuid');
const dynamoDB = new AWS.DynamoDB.DocumentClient();
const sqs = new AWS.SQS();
const lambda = new AWS.Lambda();
const axios = require('axios');

// Configura√ß√µes
const USERS_TABLE = process.env.USERS_TABLE || 'usuarios';
const INTERACTIONS_TABLE = process.env.INTERACTIONS_TABLE || 'interacoes';
const CONTENTS_TABLE = process.env.CONTENTS_TABLE || 'conteudos';
const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY;
const CLAUDE_API_URL = process.env.CLAUDE_API_URL || 'https://api.anthropic.com/v1/messages';
const WHATSAPP_SENDER_LAMBDA = process.env.WHATSAPP_SENDER_LAMBDA;
const MAX_TOKENS = process.env.MAX_TOKENS || 1000;

exports.handler = async (event) => {
  // Processar registros da fila SQS
  const records = event.Records || [];
  console.log(`Processando ${records.length} mensagens da fila`);
  
  for (const record of records) {
    try {
      const message = JSON.parse(record.body);
      
      console.log('Processando mensagem:', JSON.stringify(message));
      
      // Extrair dados principais
      const { userId, interactionId, content, context, type } = message;
      
      // Buscar dados completos do usu√°rio
      const user = await getUserData(userId);
      if (!user) {
        console.error(`Usu√°rio n√£o encontrado: ${userId}`);
        continue;
      }
      
      // Buscar detalhes da intera√ß√£o
      const interaction = await getInteractionData(interactionId);
      if (!interaction) {
        console.error(`Intera√ß√£o n√£o encontrada: ${interactionId}`);
        continue;
      }
      
      // Determinar tipo de resposta necess√°ria
      const responseType = await determineResponseType(user, interaction, context);
      
      // Gerar resposta apropriada
      const response = await generateResponse(responseType, user, interaction, context);
      
      // Enviar resposta ao usu√°rio
      await sendResponse(user, response, interactionId);
      
      // Atualizar dados de intera√ß√£o e perfil do usu√°rio
      await updateInteractionWithResponse(interactionId, response);
      await updateUserProfile(userId, interaction, response);
      
    } catch (error) {
      console.error('Erro ao processar mensagem da fila:', error);
      console.error('Mensagem original:', record.body);
      
      // Em uma implementa√ß√£o completa, aqui tratariamos erros de maneira mais robusta
      // Por exemplo, movendo para uma DLQ ou tentando uma estrat√©gia alternativa
    }
  }
  
  return { processed: records.length };
};

// Busca dados completos do usu√°rio
async function getUserData(userId) {
  const result = await dynamoDB.get({
    TableName: USERS_TABLE,
    Key: { userId }
  }).promise();
  
  return result.Item;
}

// Busca detalhes da intera√ß√£o
async function getInteractionData(interactionId) {
  const result = await dynamoDB.get({
    TableName: INTERACTIONS_TABLE,
    Key: { interactionId }
  }).promise();
  
  return result.Item;
}

// Determina o tipo de resposta adequado para a intera√ß√£o
async function determineResponseType(user, interaction, context) {
  // Verificar se √© um comando espec√≠fico
  if (interaction.type === 'command') {
    return {
      type: 'command_response',
      commandType: interaction.contentType
    };
  }
  
  // Verificar se usu√°rio est√° em processo de onboarding
  if (!user.onboardingCompleted) {
    return {
      type: 'onboarding',
      step: context?.stage === 'onboarding' ? context.step : 'welcome'
    };
  }
  
  // Analisar conte√∫do da mensagem para determinar inten√ß√£o
  // Em uma implementa√ß√£o completa, usar√≠amos NLP mais robusto aqui
  const content = interaction.content.toLowerCase();
  
  if (content.includes('obrigad') || content.includes('valeu') || content.includes('thanks')) {
    return { type: 'acknowledgment' };
  }
  
  if (content.includes('?') || 
      content.includes('como') || 
      content.includes('qual') || 
      content.includes('quais') ||
      content.includes('onde') ||
      content.includes('quando')) {
    return { type: 'question_answer' };
  }
  
  if (content.includes('ferramenta') || 
      content.includes('tool') || 
      content.includes('aplicativo') || 
      content.includes('app') ||
      content.includes('software')) {
    return { type: 'tool_recommendation' };
  }
  
  if (content.includes('tend√™ncia') || 
      content.includes('tendencia') || 
      content.includes('trend') || 
      content.includes('futuro') ||
      content.includes('novidade')) {
    return { type: 'trend_insight' };
  }
  
  // Resposta padr√£o se n√£o conseguir determinar
  return { type: 'general_response' };
}

// Gera resposta baseada no tipo determinado
async function generateResponse(responseType, user, interaction, context) {
  const { type } = responseType;
  
  // ID √∫nico para a resposta
  const responseId = `resp${uuidv4().replace(/-/g, '')}`;
  
  // Estrutura b√°sica da resposta
  const response = {
    responseId,
    interactionId: interaction.interactionId,
    userId: user.userId,
    responseType: type,
    timestamp: new Date().toISOString(),
    channel: 'whatsapp'
  };
  
  // Gerar conte√∫do espec√≠fico baseado no tipo
  switch (type) {
    case 'onboarding':
      response.content = await generateOnboardingResponse(responseType.step, user);
      break;
      
    case 'command_response':
      response.content = await generateCommandResponse(responseType.commandType, interaction.content, user);
      break;
      
    case 'question_answer':
      response.content = await generateQuestionAnswer(interaction.content, user);
      break;
      
    case 'tool_recommendation':
      response.content = await generateToolRecommendation(interaction.content, user);
      break;
      
    case 'trend_insight':
      response.content = await generateTrendInsight(interaction.content, user);
      break;
      
    case 'acknowledgment':
      response.content = generateAcknowledgment(user);
      break;
      
    case 'general_response':
    default:
      response.content = await generateGeneralResponse(interaction.content, user);
      break;
  }
  
  // Adicionar metadados e enriquecimentos
  response.contentLength = response.content.length;
  response.isPersonalized = true;
  
  return response;
}

// Gera resposta para etapa de onboarding
async function generateOnboardingResponse(step, user) {
  // Em uma implementa√ß√£o completa, ter√≠amos um fluxo detalhado de onboarding
  // Com perguntas espec√≠ficas em cada etapa
  
  const onboardingSteps = {
    welcome: `Ol√° ${user.name || ''}! üëã Bem-vindo ao Radar de Tend√™ncias em Marketing Digital. Vou te ajudar a ficar por dentro das √∫ltimas novidades, ferramentas e estrat√©gias. Para come√ßar, poderia me contar qual √© o seu cargo ou fun√ß√£o profissional? (Ex: gerente de marketing, social media, empreendedor...)`,
    
    profile_question: 'Obrigado! Em qual setor ou ind√∫stria voc√™ atua principalmente?',
    
    interests_question: '√ìtimo! Quais √°reas do marketing digital mais interessam a voc√™? (Ex: m√≠dias sociais, SEO, e-mail marketing, conte√∫do, performance, etc)',
    
    tools_question: 'Quais ferramentas de marketing voc√™ utiliza atualmente no seu trabalho?',
    
    challenges_question: 'Quais s√£o seus maiores desafios ou dificuldades no marketing digital atualmente?',
    
    finishing: `Perfeito! Baseado no que voc√™ me contou, vou personalizar o conte√∫do para seus interesses. Voc√™ receber√° atualiza√ß√µes sobre tend√™ncias, ferramentas e dicas pr√°ticas. A qualquer momento, voc√™ pode usar comandos como:\n\n/ferramenta - para buscar ferramentas\n/tendencia - para ver tend√™ncias recentes\n/case - para estudos de caso\n/ajuda - para ver todos os comandos\n\nVoc√™ prefere receber quantas atualiza√ß√µes por dia? (Responda com "poucas", "m√©dias" ou "muitas")`
  };
  
  return onboardingSteps[step] || onboardingSteps.welcome;
}

// Gera resposta para comandos espec√≠ficos
async function generateCommandResponse(commandType, content, user) {
  switch (commandType) {
    case 'tool_recommendation':
      return await generateToolRecommendation(content, user);
      
    case 'case_study':
      return await generateCaseStudy(content, user);
      
    case 'trend_report':
      return await generateTrendInsight(content, user);
      
    case 'help_menu':
    default:
      return `Ol√° ${user.name || 'Especialista'}! üëã Aqui est√£o os comandos dispon√≠veis:\n\n` +
        `üìä /tendencia - Descubra tend√™ncias recentes em marketing digital\n` +
        `üõ†Ô∏è /ferramenta - Recomenda√ß√µes de ferramentas para necessidades espec√≠ficas\n` +
        `üìö /case - Estudos de caso e exemplos pr√°ticos\n` +
        `‚ùì /ajuda - Mostra esta lista de comandos\n\n` +
        `Voc√™ tamb√©m pode me perguntar qualquer coisa sobre marketing digital, ferramentas e estrat√©gias!`;
  }
}

// Gera resposta para perguntas gerais
async function generateQuestionAnswer(question, user) {
  // Usar Claude para gerar resposta personalizada
  const preferredFormat = user.preferences?.preferredContentFormat || 'detailed';
  const interests = user.preferences?.interests || [];
  const topInterests = interests.slice(0, 3).map(i => i.category).join(', ');
  
  const prompt = createClaudePrompt({
    role: 'assistant',
    type: 'question_answer',
    userQuestion: question,
    userProfile: {
      role: user.profile?.role,
      interests: topInterests,
      level: determineUserLevel(user)
    },
    format: preferredFormat
  });
  
  const claudeResponse = await callClaudeAPI(prompt);
  return claudeResponse.trim();
}

// Gera recomenda√ß√£o de ferramenta
async function generateToolRecommendation(content, user) {
  // Primeiro verificar se temos recomenda√ß√µes pr√©-geradas no banco
  const toolQuery = content.toLowerCase().replace('/ferramenta', '').replace('/tool', '').trim();
  
  // Buscar ferramentas relacionadas no DynamoDB
  let relatedTools;
  try {
    const queryResult = await dynamoDB.query({
      TableName: CONTENTS_TABLE,
      IndexName: 'typeIndex',
      KeyConditionExpression: 'contentType = :type',
      FilterExpression: 'contains(tags, :tag)',
      ExpressionAttributeValues: {
        ':type': 'tool_recommendation',
        ':tag': extractMainTopic(toolQuery || 'geral')
      }
    }).promise();
    
    relatedTools = queryResult.Items;
  } catch (error) {
    console.error('Erro ao buscar ferramentas:', error);
    relatedTools = [];
  }
  
  // Se encontrou ferramentas no banco, usar esse conte√∫do
  if (relatedTools && relatedTools.length > 0) {
    const tool = relatedTools[0];
    const format = user.preferences?.preferredContentFormat || 'detailed';
    
    return tool.versions[format] || tool.versions.detailed;
  }
  
  // Caso contr√°rio, gerar com Claude
  const prompt = createClaudePrompt({
    role: 'assistant',
    type: 'tool_recommendation',
    userQuery: toolQuery || 'marketing digital',
    userProfile: {
      role: user.profile?.role,
      interests: user.preferences?.interests.map(i => i.category).join(', ') || 'marketing digital',
      toolsUsed: user.profile?.toolsUsed?.join(', ') || ''
    },
    format: user.preferences?.preferredContentFormat || 'detailed'
  });
  
  const claudeResponse = await callClaudeAPI(prompt);
  return claudeResponse.trim();
}

// Gera insights sobre tend√™ncias
async function generateTrendInsight(content, user) {
  const trendQuery = content.toLowerCase().replace('/tendencia', '').replace('/tend√™ncia', '').replace('/trend', '').trim();
  
  // Prompt para o Claude
  const prompt = createClaudePrompt({
    role: 'assistant',
    type: 'trend_insight',
    userQuery: trendQuery || 'marketing digital',
    userProfile: {
      role: user.profile?.role,
      interests: user.preferences?.interests.map(i => i.category).join(', ') || 'marketing digital',
      level: determineUserLevel(user)
    },
    format: user.preferences?.preferredContentFormat || 'detailed'
  });
  
  const claudeResponse = await callClaudeAPI(prompt);
  return claudeResponse.trim();
}

// Gera estudo de caso
async function generateCaseStudy(content, user) {
  const caseQuery = content.toLowerCase().replace('/case', '').replace('/caso', '').trim();
  
  // Prompt para o Claude
  const prompt = createClaudePrompt({
    role: 'assistant',
    type: 'case_study',
    userQuery: caseQuery || 'marketing digital',
    userProfile: {
      role: user.profile?.role,
      interests: user.preferences?.interests.map(i => i.category).join(', ') || 'marketing digital',
      industry: user.profile?.industry || 'geral'
    },
    format: user.preferences?.preferredContentFormat || 'detailed'
  });
  
  const claudeResponse = await callClaudeAPI(prompt);
  return claudeResponse.trim();
}

// Gera uma resposta de agradecimento personalizada
function generateAcknowledgment(user) {
  const responses = [
    `Foi um prazer ajudar! Estou aqui quando precisar de mais informa√ß√µes sobre marketing digital.`,
    `Que bom que pude ser √∫til! Alguma outra d√∫vida sobre ferramentas ou estrat√©gias?`,
    `Disponha! Continue enviando suas perguntas sobre as tend√™ncias do marketing digital.`,
    `Por nada! Lembre-se que voc√™ pode usar /ferramenta ou /tendencia para descobrir mais novidades.`
  ];
  
  return responses[Math.floor(Math.random() * responses.length)];
}

// Gera uma resposta geral para mensagens n√£o categorizadas
async function generateGeneralResponse(content, user) {
  // Prompt para o Claude
  const prompt = createClaudePrompt({
    role: 'assistant',
    type: 'general_response',
    userMessage: content,
    userProfile: {
      role: user.profile?.role,
      interests: user.preferences?.interests.map(i => i.category).join(', ') || 'marketing digital',
      level: determineUserLevel(user)
    }
  });
  
  const claudeResponse = await callClaudeAPI(prompt);
  return claudeResponse.trim();
}

// Envia resposta para o usu√°rio
async function sendResponse(user, response, interactionId) {
  // Enviar atrav√©s do Lambda espec√≠fico para WhatsApp
  await lambda.invoke({
    FunctionName: WHATSAPP_SENDER_LAMBDA,
    InvocationType: 'Event', // ass√≠ncrono
    Payload: JSON.stringify({
      phoneNumber: user.phoneNumber,
      message: response.content,
      metadata: {
        responseId: response.responseId,
        interactionId,
        responseType: response.responseType
      }
    })
  }).promise();
  
  // Salvar resposta no DynamoDB
  const responseInteraction = {
    interactionId: `int${uuidv4().replace(/-/g, '')}`,
    userId: user.userId,
    timestamp: new Date().toISOString(),
    channel: 'whatsapp',
    direction: 'outgoing',
    type: 'message',
    contentType: response.responseType,
    content: response.content,
    context: {
      previousInteractionId: interactionId,
      responseToInteractionId: interactionId,
      responseId: response.responseId
    },
    metrics: {
      deliveryStatus: 'sent',
      responseTime: calculateResponseTime(interactionId)
    }
  };
  
  await dynamoDB.put({
    TableName: INTERACTIONS_TABLE,
    Item: responseInteraction
  }).promise();
}

// Atualiza a intera√ß√£o original com informa√ß√µes da resposta
async function updateInteractionWithResponse(interactionId, response) {
  await dynamoDB.update({
    TableName: INTERACTIONS_TABLE,
    Key: { interactionId },
    UpdateExpression: 'set responseReceived = :true, responseId = :respId, responseType = :respType, responseTimestamp = :timestamp',
    ExpressionAttributeValues: {
      ':true': true,
      ':respId': response.responseId,
      ':respType': response.responseType,
      ':timestamp': new Date().toISOString()
    }
  }).promise();
}

// Atualiza o perfil do usu√°rio baseado nas intera√ß√µes
async function updateUserProfile(userId, interaction, response) {
  // Em uma implementa√ß√£o completa, aqui far√≠amos atualiza√ß√£o de
  // interesses, prefer√™ncias e outras informa√ß√µes do perfil baseado
  // nas intera√ß√µes e an√°lise das mensagens
  
  // Exemplo de atualiza√ß√£o b√°sica
  await dynamoDB.update({
    TableName: USERS_TABLE,
    Key: { userId },
    UpdateExpression: 'set lastInteraction = :timestamp, engagement.engagementScore = engagement.engagementScore + :score',
    ExpressionAttributeValues: {
      ':timestamp': new Date().toISOString(),
      ':score': calculateEngagementScore(interaction, response)
    }
  }).promise();
}

// Fun√ß√µes auxiliares

// Cria prompt apropriado para Claude API
function createClaudePrompt({ role, type, userMessage, userQuestion, userQuery, userProfile, format }) {
  switch (type) {
    case 'question_answer':
      return {
        system: `Voc√™ √© um assistente especializado em marketing digital, particularmente atualizado em ferramentas de IA e tend√™ncias para 2025. 
                 Voc√™ est√° respondendo para um profissional de marketing com o perfil: ${JSON.stringify(userProfile)}.
                 Mantenha respostas informativas, pr√°ticas e atualizadas. Use tom profissional e amig√°vel.
                 A resposta deve ser no formato ${format} - 'brief' significa concisa (2-3 par√°grafos), 'detailed' significa abrangente (4-6 par√°grafos com exemplos).`,
        messages: [
          { role: "user", content: userQuestion }
        ]
      };
      
    case 'tool_recommendation':
      return {
        system: `Voc√™ √© um assistente especializado em recomendar ferramentas de marketing digital, com foco especial em solu√ß√µes de IA para 2025.
                 Voc√™ est√° recomendando para um profissional com perfil: ${JSON.stringify(userProfile)}.
                 Ao recomendar ferramentas, sempre mencione: principais recursos, caso de uso ideal, faixa de pre√ßo aproximada, e uma alternativa gratuita quando poss√≠vel.
                 Recomende especificamente para a consulta do usu√°rio, n√£o seja gen√©rico.
                 Inclua links de afiliados para Hotmart e Eduzz quando aplic√°vel (use placeholder "LINK_AFILIADO").`,
        messages: [
          { role: "user", content: `Preciso de recomenda√ß√µes de ferramentas para: ${userQuery}` }
        ]
      };
      
    case 'trend_insight':
      return {
        system: `Voc√™ √© um especialista em tend√™ncias de marketing digital para 2025 e al√©m.
                 Voc√™ est√° compartilhando insights com um profissional com perfil: ${JSON.stringify(userProfile)}.
                 Foque em tend√™ncias atuais e emergentes, evitando informa√ß√µes desatualizadas.
                 Mencione como a tend√™ncia impacta o nicho espec√≠fico do usu√°rio e como ele pode se preparar.
                 Seja espec√≠fico, cite exemplos e casos reais, e inclua dados quando relevante.`,
        messages: [
          { role: "user", content: `Quais s√£o as tend√™ncias atuais ou emergentes relacionadas a: ${userQuery}` }
        ]
      };
      
    case 'case_study':
      return {
        system: `Voc√™ √© um especialista em an√°lise de casos de sucesso em marketing digital.
                 Voc√™ est√° compartilhando com um profissional com perfil: ${JSON.stringify(userProfile)}.
                 Ao apresentar casos, inclua: contexto/problema, estrat√©gia implementada, ferramentas utilizadas, resultados obtidos e li√ß√µes aprendidas.
                 Priorize casos recentes e relevantes para o setor do usu√°rio.
                 Seja espec√≠fico e inclua dados quantitativos quando poss√≠vel.`,
        messages: [
          { role: "user", content: `Me conte sobre casos de sucesso relacionados a: ${userQuery}` }
        ]
      };
      
    case 'general_response':
    default:
      return {
        system: `Voc√™ √© um assistente de marketing digital especializado em tend√™ncias, ferramentas e estrat√©gias para 2025.
                 Voc√™ est√° conversando com um profissional com perfil: ${JSON.stringify(userProfile)}.
                 Seja √∫til, informativo e pr√°tico. Mantenha respostas concisas mas completas.
                 Quando apropriado, sugira comandos espec√≠ficos (/ferramenta, /tendencia, /case) para informa√ß√µes mais detalhadas.`,
        messages: [
          { role: "user", content: userMessage }
        ]
      };
  }
}

// Chama a API do Claude para gerar respostas
async function callClaudeAPI(prompt) {
  try {
    const response = await axios.post(
      CLAUDE_API_URL,
      {
        model: "claude-3-haiku-20240307",
        max_tokens: MAX_TOKENS,
        system: prompt.system,
        messages: prompt.messages
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': CLAUDE_API_KEY,
          'anthropic-version': '2023-06-01'
        }
      }
    );
    
    return response.data.content[0].text;
  } catch (error) {
    console.error('Erro ao chamar Claude API:', error);
    
    // Resposta de fallback em caso de erro
    return "Desculpe, estou com dificuldades para processar sua solicita√ß√£o no momento. Por favor, tente novamente em instantes ou use um dos comandos dispon√≠veis como /ajuda.";
  }
}

// Extrai o t√≥pico principal de uma mensagem
function extractMainTopic(message) {
  // Em uma implementa√ß√£o completa, usaria NLP mais sofisticada
  // Vers√£o simplificada extrai palavras-chave
  const keywords = [
    'instagram', 'facebook', 'tiktok', 'linkedin', 'twitter', 'social', 'rede', 
    'email', 'e-mail', 'newsletter', 'automa√ß√£o', 'automacao', 'automation',
    'seo', 'sem', 'ads', 'an√∫ncio', 'anuncio', 'publicidade', 'marketing', 
    'conte√∫do', 'conteudo', 'content', 'lead', 'convers√£o', 'conversao', 'conversion',
    'crm', 'cliente', 'customer', 'analytics', 'an√°lise', 'analise', 'dados', 'data',
    'ia', 'ai', 'intelig√™ncia', 'inteligencia', 'intelligence'
  ];
  
  const messageLower = message.toLowerCase();
  
  for (const keyword of keywords) {
    if (messageLower.includes(keyword)) {
      return keyword;
    }
  }
  
  return 'marketing';
}

// Determina o n√≠vel de experi√™ncia do usu√°rio
function determineUserLevel(user) {
  const totalInteractions = user.engagement?.totalMessages || 0;
  const experience = user.profile?.experience || 'unknown';
  
  // Combinar experi√™ncia declarada com engajamento
  if (experience.includes('10+') || totalInteractions > 100) {
    return 'expert';
  } else if (experience.includes('5') || experience.includes('senior') || totalInteractions > 50) {
    return 'advanced';
  } else if (experience.includes('3') || experience.includes('junior') || totalInteractions > 20) {
    return 'intermediate';
  } else {
    return 'beginner';
  }
}

// Calcula tempo de resposta em segundos
function calculateResponseTime(interactionId) {
  // Em uma implementa√ß√£o real, calcularia a diferen√ßa entre timestamps
  return 45; // valor de exemplo
}

// Calcula pontua√ß√£o de engajamento para esta intera√ß√£o
function calculateEngagementScore(interaction, response) {
  // L√≥gica simplificada para c√°lculo de engajamento
  // Uma implementa√ß√£o real seria mais sofisticada
  
  // Tipos de intera√ß√£o que indicam alto engajamento
  const highEngagementTypes = ['question_answer', 'tool_recommendation', 'trend_insight'];
  
  if (highEngagementTypes.includes(response.responseType)) {
    return 2;
  }
  
  return 1;
}