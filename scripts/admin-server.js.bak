const express = require('express');
const cors = require('cors');
const AWS = require('aws-sdk');
const path = require('path');
const bodyParser = require('body-parser');

// Inicializar o express
const app = express();
const PORT = process.env.PORT || 3000;

// ======== CONFIGURA√á√ÉO E VALIDA√á√ÉO INICIAL ========
console.log('==========================================');
console.log('Iniciando servidor admin com conex√£o √† AWS');
console.log('==========================================');

// Valida√ß√£o de vari√°veis de ambiente cr√≠ticas
const requiredEnvs = ['AWS_REGION', 'USUARIOS_TABLE', 'CONTEUDOS_TABLE'];
const missingEnvs = requiredEnvs.filter(env => !process.env[env]);

if (missingEnvs.length > 0) {
  console.warn('‚ö†Ô∏è ATEN√á√ÉO: Vari√°veis de ambiente recomendadas n√£o encontradas:', missingEnvs.join(', '));
  console.warn('Usando valores padr√£o, que podem n√£o funcionar com sua configura√ß√£o de produ√ß√£o.');
}

// Configura√ß√£o AWS
const awsRegion = process.env.AWS_REGION || 'us-east-1';
console.log(`Regi√£o AWS configurada: ${awsRegion}`);

// Configura√ß√£o DynamoDB
const dynamoConfig = {
  region: awsRegion,
  maxRetries: 3,
  httpOptions: { timeout: 5000 }
};

// Inicializar AWS SDK
AWS.config.update(dynamoConfig);
const dynamoDB = new AWS.DynamoDB.DocumentClient();

// Nomes das tabelas em produ√ß√£o
const USUARIOS_TABLE = process?.env?.USUARIOS_TABLE || 'antena-app-Users-prod'; // Ajuste para o nome real em produ√ß√£o
const CONTEUDOS_TABLE = process?.env?.CONTEUDOS_TABLE || 'antena-app-Contents-prod'; // Ajuste para o nome real em produ√ß√£o

console.log(`Tabela de usu√°rios: ${USUARIOS_TABLE}`);
console.log(`Tabela de conte√∫dos: ${CONTEUDOS_TABLE}`);

// Middleware
app.use(express.json());
app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.static(__dirname)); // Serve arquivos da pasta atual
app.use(bodyParser.json());

// Servir o arquivo HTML administrativo
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'admin-server.html'));
});

// ======== FUN√á√ïES DE VALIDA√á√ÉO ========

// Verificar conex√£o com DynamoDB e tabelas
async function validateAwsConnection() {
  console.log('Verificando conex√£o com AWS e tabelas do DynamoDB...');
  
  try {
    // Verificar se conseguimos listar tabelas (teste de credenciais)
    const listTablesResult = await new AWS.DynamoDB().listTables().promise();
    console.log(`‚úÖ Conex√£o com AWS estabelecida. ${listTablesResult.TableNames.length} tabelas encontradas.`);
    
    // Verificar exist√™ncia das tabelas espec√≠ficas
    const allTables = listTablesResult.TableNames;
    
    if (!allTables.includes(USUARIOS_TABLE)) {
      console.error(`‚ùå ERRO: Tabela de usu√°rios '${USUARIOS_TABLE}' n√£o encontrada.`);
      console.log('Tabelas dispon√≠veis:', allTables.join(', '));
    return false;
  }
    
    if (!allTables.includes(CONTEUDOS_TABLE)) {
      console.error(`‚ùå ERRO: Tabela de conte√∫dos '${CONTEUDOS_TABLE}' n√£o encontrada.`);
      console.log('Tabelas dispon√≠veis:', allTables.join(', '));
      return false;
    }
    
    console.log('‚úÖ Tabelas verificadas e encontradas.');
    
    // Teste de leitura na tabela de usu√°rios
    try {
      const userTest = await dynamoDB.scan({
          TableName: USUARIOS_TABLE,
        Limit: 1
        }).promise();
        
      console.log(`‚úÖ Leitura de tabela de usu√°rios testada. ${userTest.Items.length} item(s) lido(s).`);
      
      if (userTest.Items.length > 0) {
        const sampleUser = userTest.Items[0];
        const idField = sampleUser.id ? 'id' : 
                        sampleUser.usuarioId ? 'usuarioId' : 
                        sampleUser.telefone ? 'telefone' : null;
        
        if (!idField) {
          console.warn('‚ö†Ô∏è AVISO: N√£o foi poss√≠vel determinar o campo de ID do usu√°rio. Verifique a estrutura da tabela.');
        } else {
          console.log(`‚úÖ Campo de ID identificado: '${idField}'`);
        }
      }
    } catch (scanError) {
      console.error(`‚ùå ERRO ao ler tabela de usu√°rios:`, scanError.message);
      return false;
    }
    
    return true;
    } catch (error) {
    console.error('‚ùå ERRO ao verificar conex√£o com AWS:', error.message);
    if (error.code === 'CredentialsError' || error.code === 'UnrecognizedClientException') {
      console.error(`
        üîë PROBLEMA DE CREDENCIAIS AWS: Verifique se voc√™ configurou suas credenciais corretamente.
        
        M√©todos para configurar credenciais:
        1. Arquivo ~/.aws/credentials
        2. Vari√°veis de ambiente AWS_ACCESS_KEY_ID e AWS_SECRET_ACCESS_KEY
        3. Perfil do IAM Instance se estiver rodando em uma inst√¢ncia EC2
      `);
    } else if (error.code === 'UnrecognizedClientException') {
      console.error(`
        ‚ö†Ô∏è PROBLEMA DE REGI√ÉO: A regi√£o ${awsRegion} pode estar incorreta ou as credenciais 
        n√£o t√™m acesso a esta regi√£o.
      `);
    }
    return false;
  }
}

// ======== ENDPOINTS DA API ========

// Endpoint de verifica√ß√£o de sa√∫de do sistema
app.get('/api/health', async (req, res) => {
  try {
    const healthStatus = {
      status: 'online',
      timestamp: new Date().toISOString(),
      aws: await validateAwsConnectionStatus(),
      environment: {
        region: awsRegion,
        usuariosTable: USUARIOS_TABLE,
        conteudosTable: CONTEUDOS_TABLE
      }
    };
    
    res.json(healthStatus);
  } catch (error) {
    console.error('Erro ao verificar sa√∫de do servidor:', error);
    res.status(500).json({
      status: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Fun√ß√£o r√°pida para validar conex√£o AWS
async function validateAwsConnectionStatus() {
  try {
    // Tentar listar tabelas para validar conex√£o
    const result = await new AWS.DynamoDB().listTables().promise();
    
    return {
      connected: true,
      tablesFound: result.TableNames.length,
      usuariosTableExists: result.TableNames.includes(USUARIOS_TABLE),
      conteudosTableExists: result.TableNames.includes(CONTEUDOS_TABLE)
    };
  } catch (error) {
    return {
      connected: false,
      error: error.message
    };
  }
}

// Endpoint para listar usu√°rios
app.get('/api/usuarios', async (req, res) => {
  try {
    console.log(`Solicita√ß√£o recebida para listar usu√°rios da tabela ${USUARIOS_TABLE}`);
    const startTime = Date.now();
    
    // Acesso ao DynamoDB em produ√ß√£o
    const params = {
      TableName: USUARIOS_TABLE,
      Limit: 1000
    };
    
    let result;
    try {
      result = await dynamoDB.scan(params).promise();
      const endTime = Date.now();
      console.log(`‚úÖ Consulta bem-sucedida: ${result.Items?.length || 0} usu√°rios encontrados (${endTime - startTime}ms)`);
    } catch (dbError) {
      console.error('‚ùå Erro na consulta ao DynamoDB:', dbError);
      return res.status(500).json({
        error: `Erro ao consultar o DynamoDB: ${dbError.message}`,
        code: dbError.code,
        table: USUARIOS_TABLE,
        region: dynamoConfig.region,
        params: params
      });
    }
    
    // Contar usu√°rios ativos (verificando diversos campos poss√≠veis)
    const usuariosAtivos = result.Items.filter(u => 
      u.status === 'ativo' || u.ativo === true || 
      u.situacao === 'ativo' || u.active === true ||
      (typeof u.status === 'number' && u.status === 1)
    ).length;
    
            res.json({
      count: result.Items.length,
      ativos: usuariosAtivos,
      table: params.TableName,
      region: dynamoConfig.region,
      timestamp: new Date().toISOString(),
      usuarios: result.Items
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao processar solicita√ß√£o /api/usuarios:', error);
    res.status(500).json({
      error: `Erro ao processar solicita√ß√£o: ${error.message}`,
      table: USUARIOS_TABLE,
      region: dynamoConfig.region,
      stack: error.stack
    });
    }
});

// Endpoint para an√°lise de perfis de usu√°rios
app.get('/api/usuarios/perfis', async (req, res) => {
  try {
    console.log(`Solicita√ß√£o recebida para an√°lise de perfis de usu√°rios da tabela ${USUARIOS_TABLE}`);
    const startTime = Date.now();
    
    // Obter dados dos usu√°rios
    const params = {
      TableName: USUARIOS_TABLE,
      Limit: 1000
    };
    
    let result;
    try {
      result = await dynamoDB.scan(params).promise();
      const endTime = Date.now();
      console.log(`‚úÖ Consulta bem-sucedida: ${result.Items?.length || 0} usu√°rios encontrados (${endTime - startTime}ms)`);
    } catch (dbError) {
      console.error('‚ùå Erro na consulta ao DynamoDB:', dbError);
      return res.status(500).json({
        error: `Erro ao consultar o DynamoDB: ${dbError.message}`,
        code: dbError.code,
        table: USUARIOS_TABLE
      });
    }
    
    // Processar dados para estat√≠sticas de prefer√™ncias
    const estatisticas = analisarPerfilUsuarios(result.Items);
    
    res.json({
      count: result.Items.length,
      timestamp: new Date().toISOString(),
      estatisticas: estatisticas
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao processar solicita√ß√£o /api/usuarios/perfis:', error);
    res.status(500).json({
      error: `Erro ao processar solicita√ß√£o: ${error.message}`,
      table: USUARIOS_TABLE
    });
  }
});

// Fun√ß√£o para analisar perfis de usu√°rios e gerar estat√≠sticas
function analisarPerfilUsuarios(usuarios) {
  // Verificar se h√° dados para analisar
  if (!usuarios || usuarios.length === 0) {
    return {
      erro: "Sem dados para an√°lise"
    };
  }
  
  // Inicializar objetos para armazenar contagens
  const interessesPrimarios = {};
  const freqMensagens = {};
  const tiposConteudo = {};
  const formatosConteudo = {};
  const cargos = {};
  const tamanhoEmpresas = {};
  const desafios = {};
  const horariosPref = Array(24).fill(0);
  
  // Analisar cada usu√°rio
  usuarios.forEach(usuario => {
    // Interesses prim√°rios
    if (usuario.preferences && usuario.preferences.interests && Array.isArray(usuario.preferences.interests)) {
      usuario.preferences.interests.forEach(interesse => {
        if (interesse && interesse.category) {
          interessesPrimarios[interesse.category] = (interessesPrimarios[interesse.category] || 0) + 1;
        }
      });
    }
    
    // Frequ√™ncia de mensagens
    if (usuario.preferences && usuario.preferences.frequency) {
      const freq = usuario.preferences.frequency;
      freqMensagens[freq] = (freqMensagens[freq] || 0) + 1;
    }
    
    // Tipos de conte√∫do preferidos
    if (usuario.preferences && usuario.preferences.contentTypes && Array.isArray(usuario.preferences.contentTypes)) {
      usuario.preferences.contentTypes.forEach(tipo => {
        if (tipo) {
          tiposConteudo[tipo] = (tiposConteudo[tipo] || 0) + 1;
        }
      });
    }
    
    // Formato de conte√∫do preferido
    if (usuario.preferences && usuario.preferences.preferredContentFormat) {
      const formato = usuario.preferences.preferredContentFormat;
      formatosConteudo[formato] = (formatosConteudo[formato] || 0) + 1;
    }
    
    // Cargos/fun√ß√µes
    if (usuario.profile && usuario.profile.role) {
      const cargo = usuario.profile.role;
      cargos[cargo] = (cargos[cargo] || 0) + 1;
    }
    
    // Tamanho da empresa
    if (usuario.profile && usuario.profile.companySize) {
      const tamanho = usuario.profile.companySize;
      tamanhoEmpresas[tamanho] = (tamanhoEmpresas[tamanho] || 0) + 1;
    }
    
    // Desafios relatados
    if (usuario.profile && usuario.profile.challenges && Array.isArray(usuario.profile.challenges)) {
      usuario.profile.challenges.forEach(desafio => {
        if (desafio) {
          desafios[desafio] = (desafios[desafio] || 0) + 1;
        }
      });
    }
    
    // Hor√°rios preferidos
    if (usuario.preferences && usuario.preferences.preferredTime) {
      const inicio = usuario.preferences.preferredTime.start;
      const fim = usuario.preferences.preferredTime.end;
      
      if (inicio && fim) {
        try {
          // Extrair as horas (assumindo formato HH:MM)
          const horaInicio = parseInt(inicio.split(':')[0]);
          const horaFim = parseInt(fim.split(':')[0]);
          
          // Incrementar todas as horas dentro do intervalo
          if (!isNaN(horaInicio) && !isNaN(horaFim)) {
            for (let h = horaInicio; h <= horaFim; h++) {
              if (h >= 0 && h < 24) {
                horariosPref[h]++;
              }
            }
          }
        } catch (error) {
          console.error('Erro ao processar hor√°rios preferidos:', error);
        }
      }
    }
  });
  
  // Retornar estat√≠sticas compiladas
  return {
    interessesPrimarios,
    freqMensagens,
    tiposConteudo,
    formatosConteudo,
    cargos,
    tamanhoEmpresas,
    desafios,
    horariosPref
  };
}

// Endpoint para listar conte√∫dos
app.get('/api/conteudos', async (req, res) => {
  try {
    console.log(`Solicita√ß√£o recebida para listar conte√∫dos da tabela ${CONTEUDOS_TABLE}`);
    const startTime = Date.now();
    
    // Acesso ao DynamoDB
        const params = {
      TableName: CONTEUDOS_TABLE,
      Limit: 1000
    };
    
    let result;
    try {
      result = await dynamoDB.scan(params).promise();
      const endTime = Date.now();
      console.log(`‚úÖ Consulta bem-sucedida: ${result.Items?.length || 0} conte√∫dos encontrados (${endTime - startTime}ms)`);
    } catch (dbError) {
      console.error('‚ùå Erro na consulta ao DynamoDB:', dbError);
      return res.status(500).json({
        error: `Erro ao consultar o DynamoDB: ${dbError.message}`,
        code: dbError.code,
        table: CONTEUDOS_TABLE,
        region: dynamoConfig.region
      });
    }
    
    res.json({
      count: result.Items.length,
      table: params.TableName,
      region: dynamoConfig.region,
      timestamp: new Date().toISOString(),
      conteudos: result.Items
    });
    
    } catch (error) {
    console.error('‚ùå Erro ao processar solicita√ß√£o /api/conteudos:', error);
    res.status(500).json({
      error: `Erro ao processar solicita√ß√£o: ${error.message}`,
      table: CONTEUDOS_TABLE
    });
  }
});

// Fun√ß√£o para extrair UUID puro de um ID com prefixo
function extractUUID(id) {
  // Verificar se o ID segue o padr√£o de um UUID com prefixo
  const uuidRegex = /^[a-z]+([\da-f]{8}-?[\da-f]{4}-?[\da-f]{4}-?[\da-f]{4}-?[\da-f]{12})$/i;
  const match = id.match(uuidRegex);
  
  if (match && match[1]) {
    // Formatar o UUID para formato padr√£o com h√≠fens
    const uuid = match[1].replace(/^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/i, '$1-$2-$3-$4-$5');
    return uuid.toLowerCase();
  }
  
  // Verificar outro padr√£o comum onde o prefixo √© seguido por um UUID sem h√≠fens
  const uuidNoHyphensRegex = /^[a-z]+([\da-f]{32})$/i;
  const matchNoHyphens = id.match(uuidNoHyphensRegex);
  
  if (matchNoHyphens && matchNoHyphens[1]) {
    // Formatar o UUID para formato padr√£o com h√≠fens
    const uuid = matchNoHyphens[1].replace(/^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})$/i, '$1-$2-$3-$4-$5');
    return uuid.toLowerCase();
  }
  
  return null;
}

// Endpoint para remover um usu√°rio
app.delete('/api/usuarios/:id', async (req, res) => {
  const id = req.params.id;
  console.log(`‚ö†Ô∏è Solicita√ß√£o de remo√ß√£o de usu√°rio recebida. ID: ${id}`);
  
  try {
    // Criar varia√ß√µes do ID para tentar (com e sem prefixos comuns)
    let idVariations = [id];
    
    // Se o ID come√ßa com algum prefixo conhecido, adicionar vers√£o sem prefixo
    const knownPrefixes = ['usr', 'user', 'u-', 'user-', 'id-'];
    for (const prefix of knownPrefixes) {
      if (id.startsWith(prefix)) {
        idVariations.push(id.substring(prefix.length));
        console.log(`Adicionada varia√ß√£o sem prefixo '${prefix}': ${id.substring(prefix.length)}`);
      }
    }

    // Se o formato parece ser UUID com prefixo, tentar remover o prefixo
    if (/^[a-z]+[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$/i.test(id)) {
      const uuidPart = id.replace(/^[a-z]+/i, '');
      idVariations.push(uuidPart);
      console.log(`ID parece ser UUID com prefixo. Tentando extrair parte UUID: ${uuidPart}`);
      
      // Tentar extrair e formatar UUID corretamente
      const extractedUUID = extractUUID(id);
      if (extractedUUID && !idVariations.includes(extractedUUID)) {
        idVariations.push(extractedUUID);
        console.log(`UUID extra√≠do e formatado: ${extractedUUID}`);
      }
    }
    
    // Verificar metadados da tabela primeiro para entender a estrutura de chave
    try {
      console.log('Obtendo metadados da tabela DynamoDB:', USUARIOS_TABLE);
      // Usar AWS.DynamoDB em vez de DocumentClient para acessar o m√©todo describeTable
      const dynamoDBStandard = new AWS.DynamoDB();
      const tableData = await dynamoDBStandard.describeTable({
        TableName: USUARIOS_TABLE
      }).promise();
      
      if (tableData && tableData.Table && tableData.Table.KeySchema) {
        console.log('Esquema de chave da tabela:', JSON.stringify(tableData.Table.KeySchema));
        
        // Extrair informa√ß√µes sobre as chaves
        const partitionKey = tableData.Table.KeySchema.find(k => k.KeyType === 'HASH');
        const sortKey = tableData.Table.KeySchema.find(k => k.KeyType === 'RANGE');
        
        if (partitionKey) {
          console.log(`Chave de parti√ß√£o encontrada: ${partitionKey.AttributeName}`);
          
          if (sortKey) {
            console.log(`Chave de ordena√ß√£o encontrada: ${sortKey.AttributeName}`);
            console.log('‚ö†Ô∏è A tabela usa uma chave composta. Tentando determinar o valor da chave de ordena√ß√£o.');
          }
          
          // Obter informa√ß√µes sobre os usu√°rios atrav√©s de uma opera√ß√£o de scan
          console.log('Realizando scan para encontrar o usu√°rio com varia√ß√µes de ID:', idVariations);
          
          let scanExpression = '';
          let expressionAttrValues = {};
          
          idVariations.forEach((varId, index) => {
            if (index > 0) scanExpression += ' OR ';
            
            // Priorizar o campo userId conforme identificado no diagn√≥stico
            scanExpression += `userId = :id${index} OR id = :id${index} OR usuarioId = :id${index} OR telefone = :id${index} OR phoneNumber = :id${index}`;
            expressionAttrValues[`:id${index}`] = varId;
          });
          
          const scanParams = {
            TableName: USUARIOS_TABLE,
            FilterExpression: scanExpression,
            ExpressionAttributeValues: expressionAttrValues
          };
          
          const scanResult = await dynamoDB.scan(scanParams).promise();
          
          if (scanResult.Items && scanResult.Items.length > 0) {
            console.log(`‚úÖ Usu√°rio encontrado via scan! Total: ${scanResult.Items.length}`);
            
            // Exibir os objetos de usu√°rio encontrados para diagn√≥stico
            scanResult.Items.forEach((user, index) => {
              console.log(`Usu√°rio ${index + 1}:`, JSON.stringify(user));
              console.log(`Campos dispon√≠veis:`, Object.keys(user).join(', '));
              
              // Verificar campos que podem ser usados como ID
              const possibleIdFields = ['id', 'usuarioId', 'userId', 'telefone', 'phoneNumber', 'whatsapp', '_id', 'uid'];
              possibleIdFields.forEach(field => {
                if (user[field]) {
                  console.log(`Campo ${field} encontrado com valor: ${user[field]}`);
                }
              });
            });
            
            const user = scanResult.Items[0];
            
            // Verificar se o campo 'userId' est√° presente (principal campo de ID conforme diagn√≥stico)
            if (user.userId) {
              console.log(`Campo 'userId' encontrado, usando como chave prim√°ria: ${user.userId}`);
              const deleteParams = {
                TableName: USUARIOS_TABLE,
                Key: { userId: user.userId }
              };
              
              await dynamoDB.delete(deleteParams).promise();
              console.log(`‚úÖ Usu√°rio removido com sucesso usando userId=${user.userId}`);
              return res.json({ 
                message: 'Usu√°rio removido com sucesso',
                id: id,
                keyField: 'userId',
                valueUsed: user.userId
              });
            }
            // Se n√£o tiver userId, tentar com a chave de parti√ß√£o identificada
            else if (partitionKey.AttributeName in user) {
              // Configurar o objeto de chave corretamente
              let keyObj = {
                [partitionKey.AttributeName]: user[partitionKey.AttributeName]
              };
              
              // Se existe uma chave de ordena√ß√£o, adicionar
              if (sortKey && sortKey.AttributeName in user) {
                keyObj[sortKey.AttributeName] = user[sortKey.AttributeName];
              }
              
              console.log('Removendo usu√°rio com chave:', JSON.stringify(keyObj));
              
              const deleteParams = {
                TableName: USUARIOS_TABLE,
                Key: keyObj
              };
              
              await dynamoDB.delete(deleteParams).promise();
              console.log(`‚úÖ Usu√°rio removido com sucesso usando scan`);
              return res.json({ 
                message: 'Usu√°rio removido com sucesso',
                id: id,
                keyStructure: Object.keys(keyObj).join(', '),
              });
            } else {
              console.log(`‚ùå Usu√°rio encontrado, mas n√£o possui o atributo da chave de parti√ß√£o: ${partitionKey.AttributeName}`);
              console.log('Tentando m√©todos alternativos de remo√ß√£o...');
            }
          } else {
            console.log('‚ùå Scan n√£o encontrou usu√°rios. Tentando m√©todos alternativos...');
          }
        } else {
          console.log('‚ùå N√£o foi poss√≠vel determinar a chave de parti√ß√£o a partir dos metadados da tabela');
        }
      } else {
        console.log('‚ùå N√£o foi poss√≠vel obter informa√ß√µes sobre a estrutura da tabela');
      }
    } catch (metaError) {
      console.error('‚ùå Erro ao obter metadados da tabela:', metaError);
      console.log('Prosseguindo com tentativas alternativas de remo√ß√£o...');
    }
    
    // Se n√£o conseguiu remover pelo m√©todo acima, tentar m√©todos padr√£o
    return await tryStandardDelete(id, res);
  } catch (error) {
    console.error('‚ùå Erro geral ao remover usu√°rio:', error);
    return res.status(500).json({
      error: `Erro na opera√ß√£o: ${error.message}`,
      code: error.code || 'ERROR',
      id: id
    });
  }
});

// Fun√ß√£o auxiliar para tentar remover usu√°rio usando os m√©todos padr√£o
async function tryStandardDelete(id, res) {
  try {
    console.log('Tentando m√©todos padr√£o de dele√ß√£o para o ID:', id);
    
    // Criar varia√ß√µes do ID para tentar (com e sem prefixos comuns)
    let idVariations = [id];
    
    // Se o ID come√ßa com algum prefixo conhecido, adicionar vers√£o sem prefixo
    const knownPrefixes = ['usr', 'user', 'u-', 'user-', 'id-'];
    for (const prefix of knownPrefixes) {
      if (id.startsWith(prefix)) {
        idVariations.push(id.substring(prefix.length));
        console.log(`Adicionada varia√ß√£o sem prefixo '${prefix}': ${id.substring(prefix.length)}`);
      }
    }
    
    // Se o formato parece ser UUID com prefixo, tentar remover o prefixo
    if (/^[a-z]+[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$/i.test(id)) {
      const uuidPart = id.replace(/^[a-z]+/i, '');
      idVariations.push(uuidPart);
      console.log(`ID parece ser UUID com prefixo. Tentando extrair parte UUID: ${uuidPart}`);
      
      // Tentar extrair e formatar UUID corretamente
      const extractedUUID = extractUUID(id);
      if (extractedUUID && !idVariations.includes(extractedUUID)) {
        idVariations.push(extractedUUID);
        console.log(`UUID extra√≠do e formatado: ${extractedUUID}`);
      }
    }
    
    // Baseado no diagn√≥stico, identificamos que userId √© o principal campo de ID na tabela
    
    // Itera√ß√£o sobre todas as varia√ß√µes do ID
    for (const varId of idVariations) {
      console.log(`Tentando dele√ß√£o com varia√ß√£o do ID: ${varId}`);
      
      // 0. PRIMEIRO: Tentar com userId como chave principal (conforme identificado no diagn√≥stico)
      try {
        const getUserIdParams = {
          TableName: USUARIOS_TABLE,
          Key: { userId: varId }
        };
        
        const usuarioByUserId = await dynamoDB.get(getUserIdParams).promise();
        
        if (usuarioByUserId.Item) {
          // Usu√°rio encontrado, prosseguir com a remo√ß√£o
          const deleteParams = {
            TableName: USUARIOS_TABLE,
            Key: { userId: varId }
          };
          
          await dynamoDB.delete(deleteParams).promise();
          console.log(`‚úÖ Usu√°rio ${varId} removido com sucesso (chave: userId)`);
          return res.json({ 
            message: 'Usu√°rio removido com sucesso',
            id: id,
            keyField: 'userId',
            variationUsed: varId
          });
        }
      } catch (err) {
        console.log(`Tentativa com userId=${varId} falhou:`, err.message);
      }
      
      // 1. Tentar com id como chave simples (mantido para compatibilidade)
      try {
        const getParams = {
          TableName: USUARIOS_TABLE,
          Key: { id: varId }
        };
        
        const usuario = await dynamoDB.get(getParams).promise();
        
        if (usuario.Item) {
          // Usu√°rio encontrado, prosseguir com a remo√ß√£o
          const deleteParams = {
            TableName: USUARIOS_TABLE,
            Key: { id: varId }
          };
          
          await dynamoDB.delete(deleteParams).promise();
          console.log(`‚úÖ Usu√°rio ${varId} removido com sucesso (chave: id)`);
          return res.json({ 
            message: 'Usu√°rio removido com sucesso',
            id: id,
            keyField: 'id',
            variationUsed: varId
          });
        }
      } catch (err) {
        console.log(`Tentativa com id=${varId} falhou:`, err.message);
      }
      
      // 2. Tentar com usuarioId
      try {
        const getAltParams = {
          TableName: USUARIOS_TABLE,
          Key: { usuarioId: varId }
        };
        
        const usuarioAlt = await dynamoDB.get(getAltParams).promise();
        if (usuarioAlt.Item) {
          console.log('Usu√°rio encontrado usando "usuarioId" como chave.');
          // Deletar usando a chave correta
          const deleteParams = {
            TableName: USUARIOS_TABLE,
            Key: { usuarioId: varId }
          };
          
          await dynamoDB.delete(deleteParams).promise();
          console.log(`‚úÖ Usu√°rio ${varId} removido com sucesso (chave: usuarioId)`);
          return res.json({ 
            message: 'Usu√°rio removido com sucesso',
            id: id,
            keyField: 'usuarioId',
            variationUsed: varId
          });
        }
      } catch (err) {
        console.log(`Tentativa com usuarioId=${varId} falhou:`, err.message);
      }
      
      // 3. Tentar com telefone
      try {
        const getTelParams = {
          TableName: USUARIOS_TABLE,
          Key: { telefone: varId }
        };
        
        const usuarioTel = await dynamoDB.get(getTelParams).promise();
        if (usuarioTel.Item) {
          console.log('Usu√°rio encontrado usando "telefone" como chave.');
          // Deletar usando a chave correta
          const deleteParams = {
            TableName: USUARIOS_TABLE,
            Key: { telefone: varId }
          };
          
          await dynamoDB.delete(deleteParams).promise();
          console.log(`‚úÖ Usu√°rio ${varId} removido com sucesso (chave: telefone)`);
          return res.json({ 
            message: 'Usu√°rio removido com sucesso',
            id: id,
            keyField: 'telefone',
            variationUsed: varId
          });
        }
      } catch (err) {
        console.log(`Tentativa com telefone=${varId} falhou:`, err.message);
      }
      
      // 4. Tentar com phoneNumber
      try {
        const getPhoneParams = {
          TableName: USUARIOS_TABLE,
          Key: { phoneNumber: varId }
        };
        
        const usuarioPhone = await dynamoDB.get(getPhoneParams).promise();
        if (usuarioPhone.Item) {
          console.log('Usu√°rio encontrado usando "phoneNumber" como chave.');
          // Deletar usando a chave correta
          const deleteParams = {
            TableName: USUARIOS_TABLE,
            Key: { phoneNumber: varId }
          };
          
          await dynamoDB.delete(deleteParams).promise();
          console.log(`‚úÖ Usu√°rio ${varId} removido com sucesso (chave: phoneNumber)`);
          return res.json({ 
            message: 'Usu√°rio removido com sucesso',
            id: id,
            keyField: 'phoneNumber',
            variationUsed: varId
          });
        }
      } catch (err) {
        console.log(`Tentativa com phoneNumber=${varId} falhou:`, err.message);
      }
    }
    
    // √öltima tentativa: usar apenas a parte num√©rica se houver
    const numericPart = id.replace(/\D/g, '');
    if (numericPart && numericPart !== id) {
      console.log(`Tentando com apenas a parte num√©rica: ${numericPart}`);
      
      try {
        const getNumParams = {
          TableName: USUARIOS_TABLE,
          Key: { telefone: numericPart }
        };
        
        const usuarioNum = await dynamoDB.get(getNumParams).promise();
        if (usuarioNum.Item) {
          console.log('Usu√°rio encontrado usando parte num√©rica como telefone.');
          const deleteParams = {
            TableName: USUARIOS_TABLE,
            Key: { telefone: numericPart }
          };
          
          await dynamoDB.delete(deleteParams).promise();
          console.log(`‚úÖ Usu√°rio com telefone ${numericPart} removido com sucesso`);
          return res.json({ 
            message: 'Usu√°rio removido com sucesso',
            id: id,
            keyField: 'telefone',
            variationUsed: numericPart
          });
        }
      } catch (err) {
        console.log(`Tentativa com telefone (parte num√©rica)=${numericPart} falhou:`, err.message);
      }
    }
    
    // Se chegou aqui, n√£o conseguiu remover o usu√°rio com nenhuma tentativa
    return res.status(404).json({ 
      error: 'Usu√°rio n√£o encontrado', 
      id: id,
      message: 'N√£o foi poss√≠vel encontrar o usu√°rio com o ID fornecido em nenhuma das chaves poss√≠veis.',
      variationsTried: idVariations
    });
  } catch (dbError) {
    console.error('‚ùå Erro ao operar no DynamoDB:', dbError);
    return res.status(500).json({
      error: `Erro na opera√ß√£o: ${dbError.message}`,
      code: dbError.code,
      id: id
    });
  }
}

// Endpoint para atualizar o est√°gio do usu√°rio
app.put('/api/usuarios/:id/estagio', async (req, res) => {
  const { id } = req.params;
  const { novoEstagio } = req.body;
  
  if (!id || !novoEstagio) {
    return res.status(400).json({ error: 'ID do usu√°rio e novo est√°gio s√£o obrigat√≥rios' });
  }
  
  try {
    // Mapeamento de est√°gios do kanban para valores a serem armazenados
    const estagioMapping = {
      'novos': 'novo',
      'onboarding': 'onboarding',
      'em-progresso': 'ativo',
      'concluido': 'inativo'
    };
    
    const estagioAtualizado = estagioMapping[novoEstagio] || novoEstagio;
    
    // Par√¢metros para atualizar o usu√°rio
    const params = {
      TableName: USUARIOS_TABLE,
      Key: { id },
      UpdateExpression: "set estagio = :estagio, ultimaAtualizacao = :timestamp",
      ExpressionAttributeValues: {
        ":estagio": estagioAtualizado,
        ":timestamp": new Date().toISOString()
      },
      ReturnValues: "ALL_NEW"
    };
    
    // Atualizar no DynamoDB
    const result = await dynamoDB.update(params).promise();
    
    console.log(`Usu√°rio ${id} movido para est√°gio: ${novoEstagio}`);
    res.json({ 
      success: true, 
      message: `Usu√°rio movido para ${novoEstagio}`, 
      usuario: result.Attributes 
    });
  } catch (error) {
    console.error(`Erro ao atualizar est√°gio do usu√°rio ${id}:`, error);
    res.status(500).json({ error: `Erro ao atualizar est√°gio: ${error.message}` });
  }
});

// Endpoint para dashboards
app.get('/api/dashboards', (req, res) => {
  // Obter a regi√£o da AWS para construir os links
  const region = dynamoConfig.region;
  
  res.json({
    region: region,
    dashboards: [
      {
        name: 'Painel de Usu√°rios',
        url: `https://console.aws.amazon.com/cloudwatch/home?region=${region}#dashboards:name=UsuariosDashboard`
      },
      {
        name: 'M√©tricas de Conte√∫do',
        url: `https://console.aws.amazon.com/cloudwatch/home?region=${region}#dashboards:name=ConteudosDashboard`
      },
      {
        name: 'Performance do Sistema',
        url: `https://console.aws.amazon.com/cloudwatch/home?region=${region}#dashboards:name=PerformanceDashboard`
      },
      {
        name: 'Console do DynamoDB',
        url: `https://console.aws.amazon.com/dynamodbv2/home?region=${region}#tables`
      },
      {
        name: 'Console do Lambda',
        url: `https://console.aws.amazon.com/lambda/home?region=${region}#/functions`
      }
    ]
  });
});

// Fun√ß√£o para explorar a estrutura da tabela e detectar problemas
async function exploreTableStructure() {
  try {
    console.log('üîç Explorando estrutura da tabela DynamoDB:', USUARIOS_TABLE);
    
    // Obter metadados da tabela
    // Usar AWS.DynamoDB em vez de DocumentClient para acessar o m√©todo describeTable
    const dynamoDBStandard = new AWS.DynamoDB();
    const tableData = await dynamoDBStandard.describeTable({
      TableName: USUARIOS_TABLE
    }).promise();
    
    if (tableData && tableData.Table) {
      const keySchema = tableData.Table.KeySchema;
      const attributeDefs = tableData.Table.AttributeDefinitions;
      
      console.log('üìä Esquema de chave da tabela:');
      keySchema.forEach(key => {
        console.log(`- ${key.AttributeName} (${key.KeyType === 'HASH' ? 'Partition Key' : 'Sort Key'})`);
      });
      
      console.log('üìù Defini√ß√µes de atributos:');
      attributeDefs.forEach(attr => {
        console.log(`- ${attr.AttributeName}: ${attr.AttributeType}`);
      });
      
      // Realizar uma consulta para obter um exemplo de item
      const scanResult = await dynamoDB.scan({
        TableName: USUARIOS_TABLE,
        Limit: 1
      }).promise();
      
      if (scanResult.Items && scanResult.Items.length > 0) {
        const sampleItem = scanResult.Items[0];
        console.log('üìã Exemplo de item na tabela:');
        console.log(JSON.stringify(sampleItem, null, 2));
        
        // Verificar se a chave prim√°ria definida est√° presente no item
        const partitionKey = keySchema.find(k => k.KeyType === 'HASH')?.AttributeName;
        const sortKey = keySchema.find(k => k.KeyType === 'RANGE')?.AttributeName;
        
        if (partitionKey && sampleItem[partitionKey]) {
          console.log(`‚úÖ Chave de parti√ß√£o '${partitionKey}' encontrada no item com valor: ${sampleItem[partitionKey]}`);
        } else if (partitionKey) {
          console.log(`‚ö†Ô∏è Chave de parti√ß√£o '${partitionKey}' N√ÉO encontrada no item exemplo!`);
        }
        
        if (sortKey && sampleItem[sortKey]) {
          console.log(`‚úÖ Chave de ordena√ß√£o '${sortKey}' encontrada no item com valor: ${sampleItem[sortKey]}`);
        } else if (sortKey) {
          console.log(`‚ö†Ô∏è Chave de ordena√ß√£o '${sortKey}' N√ÉO encontrada no item exemplo!`);
        }
        
        // Verificar campos que podem ser usados como IDs
        const possibleIdFields = ['id', 'usuarioId', 'userId', 'telefone', 'phoneNumber', 'whatsapp', '_id', 'uid'];
        console.log('üîë Campos potenciais para ID encontrados no item:');
        possibleIdFields.forEach(field => {
          if (sampleItem[field]) {
            console.log(`- ${field}: ${sampleItem[field]}`);
          }
        });
      } else {
        console.log('‚ö†Ô∏è Nenhum item encontrado na tabela para an√°lise');
      }
    } else {
      console.log('‚ùå N√£o foi poss√≠vel obter metadados da tabela');
    }
  } catch (error) {
    console.error('‚ùå Erro ao explorar estrutura da tabela:', error);
  }
}

// Explorar a estrutura da tabela na inicializa√ß√£o
exploreTableStructure().then(() => {
  console.log('Explora√ß√£o da tabela conclu√≠da');
}).catch(err => {
  console.error('Erro durante a explora√ß√£o da tabela:', err);
});

// Endpoint de diagn√≥stico para exibir estrutura de usu√°rios
app.get('/api/diagnostico/usuarios', async (req, res) => {
  console.log('üîç Solicita√ß√£o de diagn√≥stico de usu√°rios recebida');
  
  try {
    // Realizar uma consulta para obter todos os itens da tabela
    const scanParams = {
      TableName: USUARIOS_TABLE,
      Limit: 10 // Limitar para n√£o sobrecarregar a resposta
    };
    
    const scanResult = await dynamoDB.scan(scanParams).promise();
    
    if (scanResult.Items && scanResult.Items.length > 0) {
      // Para cada usu√°rio, analisar a estrutura
      const usuariosAnalisados = scanResult.Items.map(usuario => {
        // Lista de campos importantes que podem ser chaves
        const camposImportantes = ['id', 'userId', 'usuarioId', 'phoneNumber', 'telefone', 'email', '_id', 'uid'];
        const detalhesCampos = {};
        
        // Verificar todos os campos dispon√≠veis
        const todosOsCampos = Object.keys(usuario);
        
        // Para cada campo importante, verificar se existe e obter o valor
        camposImportantes.forEach(campo => {
          detalhesCampos[campo] = usuario[campo] || 'n√£o presente';
        });
        
        return {
          camposChave: detalhesCampos,
          todosOsCampos: todosOsCampos,
          amostraDeDados: usuario
        };
      });
      
      return res.json({
        mensagem: 'An√°lise de estrutura de usu√°rios',
        numeroDeUsuarios: scanResult.Items.length,
        usuariosAnalisados: usuariosAnalisados
      });
    } else {
      return res.status(404).json({
        erro: 'Nenhum usu√°rio encontrado na tabela',
        tabela: USUARIOS_TABLE
      });
    }
  } catch (error) {
    console.error('‚ùå Erro ao realizar diagn√≥stico:', error);
    return res.status(500).json({
      erro: `Erro ao realizar diagn√≥stico: ${error.message}`,
      codigo: error.code || 'ERRO_DESCONHECIDO'
    });
  }
});

// Fun√ß√£o auxiliar para registrar mudan√ßa de status
async function logStatusChange(userId, previousStatus, newStatus, keyObj) {
  try {
    const logParams = {
      TableName: process.env.STATUS_LOGS_TABLE || 'RadarTendencias-StatusLogs',
      Item: {
        logId: `${userId}-${Date.now()}`,
        userId: userId,
        previousStatus: previousStatus,
        newStatus: newStatus,
        timestamp: new Date().toISOString(),
        source: 'admin-kanban',
        keyUsed: keyObj,
        success: true // Assumimos que a opera√ß√£o foi bem-sucedida, j√° que esta fun√ß√£o √© chamada ap√≥s o sucesso
      }
    };
    
    // Log no console para diagn√≥stico
    console.log(`üìù Registrando log de mudan√ßa de status: ${previousStatus} -> ${newStatus}`);
    console.log(`üìù Chave usada na opera√ß√£o: ${JSON.stringify(keyObj)}`);
    
    // Fun√ß√£o para salvar o registro em tabela adicional, se existe
    const saveErrorLog = async (error) => {
      try {
        const errorLogParams = {
          TableName: process.env.ERROR_LOGS_TABLE || 'RadarTendencias-ErrorLogs',
          Item: {
            errorId: `status-${Date.now()}`,
            userId: userId,
            error: error.message,
            code: error.code,
            operationType: 'status-change',
            previousValue: previousStatus,
            newValue: newStatus,
            timestamp: new Date().toISOString(),
            keyAttempted: keyObj
          }
        };
        
        await dynamoDB.put(errorLogParams).promise();
        console.log(`‚úÖ Log de erro registrado em tabela separada`);
      } catch (logError) {
        console.error(`‚ö†Ô∏è Falha ao registrar log de erro:`, logError);
      }
    };
    
    try {
      await dynamoDB.put(logParams).promise();
      console.log(`‚úÖ Log de mudan√ßa de status registrado com sucesso`);
      
      // Atualiza√ß√µes adicionais para garantir consist√™ncia - especialmente para o caso problem√°tico
      if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
        console.log(`üîÑ Realizando atualiza√ß√£o adicional para garantir consist√™ncia para o ID problem√°tico`);
        
        // Tentar atualizar diretamente pelo phoneNumber se dispon√≠vel
        if (keyObj.phoneNumber) {
          await dynamoDB.update({
            TableName: USUARIOS_TABLE,
            Key: { phoneNumber: keyObj.phoneNumber },
            UpdateExpression: "SET #status = :status",
            ExpressionAttributeNames: { "#status": "status" },
            ExpressionAttributeValues: { ":status": newStatus }
          }).promise().then(() => {
            console.log(`‚úÖ Atualiza√ß√£o redundante via phoneNumber realizada com sucesso`);
          }).catch(err => {
            console.error(`‚ö†Ô∏è Atualiza√ß√£o redundante falhou:`, err);
          });
        }
        
        // Verificar se o campo de telefone est√° formatado corretamente
        if (keyObj.phoneNumber && !keyObj.phoneNumber.startsWith('+')) {
          const phoneWithPlus = `+${keyObj.phoneNumber}`;
          console.log(`Tentando formato alternativo de telefone: ${phoneWithPlus}`);
          
          await dynamoDB.update({
            TableName: USUARIOS_TABLE,
            Key: { phoneNumber: phoneWithPlus },
            UpdateExpression: "SET #status = :status",
            ExpressionAttributeNames: { "#status": "status" },
            ExpressionAttributeValues: { ":status": newStatus }
          }).promise().then(() => {
            console.log(`‚úÖ Atualiza√ß√£o com formato alternativo de telefone bem-sucedida`);
          }).catch(err => {
            console.log(`Formato alternativo de telefone tamb√©m falhou:`, err.message);
          });
        }
      }
    } catch (err) {
      console.error(`‚ö†Ô∏è Erro ao registrar log de status:`, err);
      await saveErrorLog(err);
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è Erro ao preparar log de status:`, error);
  }
}

// Fun√ß√£o para detectar a estrutura da chave prim√°ria de uma tabela
async function detectPrimaryKey(tableName) {
  try {
    const dynamoDBStandard = new AWS.DynamoDB();
    const tableData = await dynamoDBStandard.describeTable({
      TableName: tableName
    }).promise();
    
    if (tableData && tableData.Table && tableData.Table.KeySchema) {
      const partitionKey = tableData.Table.KeySchema.find(k => k.KeyType === 'HASH');
      const sortKey = tableData.Table.KeySchema.find(k => k.KeyType === 'RANGE');
      
      return {
        partitionKey: partitionKey ? partitionKey.AttributeName : null,
        sortKey: sortKey ? sortKey.AttributeName : null
      };
    }
  } catch (error) {
    console.error(`Erro ao detectar chave prim√°ria: ${error.message}`);
  }
  
  return { partitionKey: null, sortKey: null };
}

// Fun√ß√£o especial para resolver o usu√°rio problem√°tico
async function resolverUsuarioProblematico(userId, status, res) {
  try {
    console.log(`üîß SOLU√á√ÉO ESPECIAL: Tentando resolver usu√°rio problem√°tico ${userId}`);
    
    // Buscar o usu√°rio usando scan
    const scanResult = await dynamoDB.scan({
      TableName: USUARIOS_TABLE,
      FilterExpression: "userId = :uid",
      ExpressionAttributeValues: { ":uid": userId },
      Limit: 1
    }).promise();
    
    if (scanResult.Items && scanResult.Items.length > 0) {
      const usuario = scanResult.Items[0];
      console.log(`‚úÖ Usu√°rio encontrado:`, JSON.stringify(usuario).substring(0, 200));
      
      // Atualizar o status no objeto e salvar com PUT
      usuario.status = status;
      usuario.lastUpdated = new Date().toISOString();
      
      await dynamoDB.put({
        TableName: USUARIOS_TABLE,
        Item: usuario
      }).promise();
      
      console.log(`‚úÖ Usu√°rio atualizado com sucesso usando PutItem`);
      
      // Verificar se a atualiza√ß√£o foi bem-sucedida
      const checkResult = await dynamoDB.scan({
        TableName: USUARIOS_TABLE,
        FilterExpression: "userId = :uid",
        ExpressionAttributeValues: { ":uid": userId },
        Limit: 1
      }).promise();
      
      if (checkResult.Items && checkResult.Items.length > 0) {
        const itemVerificado = checkResult.Items[0];
        
        if (itemVerificado.status === status) {
          console.log(`‚úÖ Verifica√ß√£o confirmou a atualiza√ß√£o para ${status}`);
          return {
            success: true,
            message: `Status atualizado para ${status}`,
            user: itemVerificado
          };
        } else {
          console.log(`‚ùå A verifica√ß√£o falhou: status = ${itemVerificado.status}, esperado = ${status}`);
          return {
            success: false,
            message: `Falha ao atualizar: status verificado = ${itemVerificado.status}`,
            actualStatus: itemVerificado.status
          };
        }
      }
    }
    
    return {
      success: false,
      message: "Usu√°rio n√£o encontrado"
    };
  } catch (error) {
    console.error(`‚ùå Erro na solu√ß√£o especial:`, error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Endpoint para atualizar o status de um usu√°rio (para o Kanban)
app.post('/api/usuarios/:userId/status', async (req, res) => {
  try {
    const userId = req.params.userId;
    const { status, previousStatus } = req.body;
    
    if (!userId || !status) {
      return res.status(400).json({
        error: 'ID do usu√°rio e status s√£o obrigat√≥rios',
        success: false
      });
    }
    
    console.log(`Solicita√ß√£o para atualizar status do usu√°rio ${userId} para ${status} (anterior: ${previousStatus || 'desconhecido'})`);
    
    // Criar v√°rias varia√ß√µes do ID para aumentar as chances de encontrar o usu√°rio
    let idVariations = [userId];
    
    // Remover prefixo "usr" se existir
    if (userId.startsWith('usr')) {
      idVariations.push(userId.substring(3));
    }
    
    // Adicionar varia√ß√µes com e sem h√≠fens - CORRE√á√ÉO DO BUG
    // O problema √© que a fun√ß√£o replace est√° sendo usada incorretamente
    // Vamos garantir que todos os caracteres do ID s√£o preservados
    
    // Vers√£o correta do ID sem h√≠fens
    const withoutHyphens = userId.replace(/-/g, '');
    console.log(`ID original: "${userId}"`);
    console.log(`ID sem h√≠fens: "${withoutHyphens}"`);
    
    if (withoutHyphens !== userId) {
      idVariations.push(withoutHyphens);
      
      // Tamb√©m tentar sem "usr" e sem h√≠fens
      if (withoutHyphens.startsWith('usr')) {
        idVariations.push(withoutHyphens.substring(3));
      }
    }

    // Temos um caso especial: usr69a96806c5e72b8847a3524adb6fcc13 
    // Tentando com varia√ß√£o espec√≠fica para esse formato
    if (userId.startsWith('usr') && userId.length > 20) {
      try {
        // Verificar se este ID espec√≠fico est√° na tabela diretamente
        const scanDirectParams = {
          TableName: USUARIOS_TABLE,
          FilterExpression: 'id = :exactId',
          ExpressionAttributeValues: {
            ':exactId': userId
          },
          Limit: 1
        };
        
        console.log(`Tentando busca direta com ID exato: ${userId}`);
        const directResult = await dynamoDB.scan(scanDirectParams).promise();
        
        if (directResult.Items && directResult.Items.length > 0) {
          console.log(`‚úÖ Usu√°rio encontrado com ID exato!`);
          const usuario = directResult.Items[0];
          console.log(`Usu√°rio: ${JSON.stringify(usuario, null, 2).substring(0, 200)}...`);
          
          // Configurar para usar a chave correta
          let keyObj = {};
          
          // Determinar qual campo √© a chave prim√°ria
          if (usuario.id) {
            keyObj.id = usuario.id;
          } else if (usuario.userId) {
            keyObj.userId = usuario.userId;
          } else if (usuario.telefone) {
            keyObj.telefone = usuario.telefone;
          } else {
            keyObj.id = userId; // Usar o ID original como fallback
          }
          
          console.log(`Usando chave: ${JSON.stringify(keyObj)}`);
          
          // Atualizar status
          const updateParams = {
            TableName: USUARIOS_TABLE,
            Key: keyObj,
            UpdateExpression: "SET #status = :status, lastUpdated = :timestamp",
            ExpressionAttributeNames: {
              "#status": "status"
            },
            ExpressionAttributeValues: {
              ":status": status,
              ":timestamp": new Date().toISOString()
            },
            ReturnValues: "ALL_NEW"
          };
          
          const updateResult = await dynamoDB.update(updateParams).promise();
          console.log(`‚úÖ Usu√°rio atualizado com sucesso!`);
          
          // Garantir que a atualiza√ß√£o foi realmente aplicada
          // Tentar uma busca de verifica√ß√£o para confirmar que o status foi atualizado
          try {
            const verifyParams = {
              TableName: USUARIOS_TABLE,
              Key: keyObj
            };
            
            console.log(`üîç Verificando se a atualiza√ß√£o foi realmente aplicada...`);
            const verifyResult = await dynamoDB.get(verifyParams).promise();
            
            if (verifyResult.Item) {
              if (verifyResult.Item.status === status) {
                console.log(`‚úÖ Verifica√ß√£o confirmada: status = ${verifyResult.Item.status}`);
              } else {
                console.log(`‚ö†Ô∏è ALERTA: Verifica√ß√£o indica que o status N√ÉO foi atualizado!`);
                console.log(`Status verificado: ${verifyResult.Item.status}, status esperado: ${status}`);
                
                // Tentar atualiza√ß√£o adicional para garantir a consist√™ncia
                console.log(`üîÑ Realizando atualiza√ß√£o adicional para garantir consist√™ncia...`);
                
                try {
                  // Tentar uma segunda atualiza√ß√£o mais simples
                  const retryParams = {
                    TableName: USUARIOS_TABLE,
                    Key: keyObj,
                    UpdateExpression: "SET #status = :status, #lastUpd = :timestamp",
                    ExpressionAttributeNames: {
                      "#status": "status",
                      "#lastUpd": "lastUpdated"
                    },
                    ExpressionAttributeValues: {
                      ":status": status,
                      ":timestamp": new Date().toISOString()
                    },
                    ReturnValues: "ALL_NEW"
                  };
                  
                  await dynamoDB.update(retryParams).promise();
                  console.log(`‚úÖ Atualiza√ß√£o adicional conclu√≠da. Verificando novamente...`);
                  
                  // Verificar se agora est√° atualizado
                  const reVerifyResult = await dynamoDB.get(verifyParams).promise();
                  if (reVerifyResult.Item && reVerifyResult.Item.status === status) {
                    console.log(`‚úÖ Verifica√ß√£o final confirmada: status = ${reVerifyResult.Item.status}`);
                  } else {
                    console.log(`‚ö†Ô∏è ALERTA FINAL: N√£o foi poss√≠vel atualizar o status no banco de dados!`);
                  }
                } catch (retryError) {
                  console.error(`‚ùå Erro na atualiza√ß√£o adicional:`, retryError);
                }
              }
            } else {
              console.log(`‚ö†Ô∏è ALERTA: Verifica√ß√£o falhou! N√£o foi poss√≠vel encontrar o usu√°rio ap√≥s a atualiza√ß√£o.`);
            }
          } catch (verifyError) {
            console.error(`‚ùå Erro ao verificar atualiza√ß√£o:`, verifyError);
          }
          
          // Registrar mudan√ßa de status se necess√°rio
          if (previousStatus && previousStatus !== status) {
            logStatusChange(userId, previousStatus, status, keyObj);
          }
          
          return res.json({
            success: true,
            message: `Status do usu√°rio ${userId} atualizado para ${status}`,
            user: updateResult.Attributes,
            keyUsed: keyObj
          });
        }
      } catch (directError) {
        console.error(`Erro na busca direta:`, directError);
      }
    }
    
    // Se for num√©rico, tentar como telefone
    const numericOnly = userId.replace(/\D/g, '');
    if (numericOnly.length > 5) {
      idVariations.push(numericOnly);
    }
    
    // Logar as varia√ß√µes que estamos tentando
    console.log(`Tentando as seguintes varia√ß√µes de ID: ${JSON.stringify(idVariations)}`);
    
    // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
    if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
      console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
      
      // Usar a fun√ß√£o especializada para resolver o problema
      const resultado = await resolverUsuarioProblematico(userId, status, res);
      
      if (resultado.success) {
        return res.json({
          success: true,
          message: `Status do usu√°rio ${userId} atualizado para ${status}`,
          user: resultado.user,
          method: "resolu√ß√£o especial"
        });
      } else {
        console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
        // Continuar com a abordagem normal
      }
      
      try {
        // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
        if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
          console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
          
          // Usar a fun√ß√£o especializada para resolver o problema
          const resultado = await resolverUsuarioProblematico(userId, status, res);
          
          if (resultado.success) {
            return res.json({
              success: true,
              message: `Status do usu√°rio ${userId} atualizado para ${status}`,
              user: resultado.user,
              method: "resolu√ß√£o especial"
            });
          } else {
            console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
            // Continuar com a abordagem normal
          }
          
          try {
            // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
            if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
              console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
              
              // Usar a fun√ß√£o especializada para resolver o problema
              const resultado = await resolverUsuarioProblematico(userId, status, res);
              
              if (resultado.success) {
                return res.json({
                  success: true,
                  message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                  user: resultado.user,
                  method: "resolu√ß√£o especial"
                });
              } else {
                console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                // Continuar com a abordagem normal
              }
              
              try {
                // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                  console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                  
                  // Usar a fun√ß√£o especializada para resolver o problema
                  const resultado = await resolverUsuarioProblematico(userId, status, res);
                  
                  if (resultado.success) {
                    return res.json({
                      success: true,
                      message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                      user: resultado.user,
                      method: "resolu√ß√£o especial"
                    });
                  } else {
                    console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                    // Continuar com a abordagem normal
                  }
                  
                  try {
                    // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                    if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                      console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                      
                      // Usar a fun√ß√£o especializada para resolver o problema
                      const resultado = await resolverUsuarioProblematico(userId, status, res);
                      
                      if (resultado.success) {
                        return res.json({
                          success: true,
                          message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                          user: resultado.user,
                          method: "resolu√ß√£o especial"
                        });
                      } else {
                        console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                        // Continuar com a abordagem normal
                      }
                      
                      try {
                        // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                        if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                          console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                          
                          // Usar a fun√ß√£o especializada para resolver o problema
                          const resultado = await resolverUsuarioProblematico(userId, status, res);
                          
                          if (resultado.success) {
                            return res.json({
                              success: true,
                              message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                              user: resultado.user,
                              method: "resolu√ß√£o especial"
                            });
                          } else {
                            console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                            // Continuar com a abordagem normal
                          }
                          
                          try {
                            // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                            if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                              console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                              
                              // Usar a fun√ß√£o especializada para resolver o problema
                              const resultado = await resolverUsuarioProblematico(userId, status, res);
                              
                              if (resultado.success) {
                                return res.json({
                                  success: true,
                                  message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                  user: resultado.user,
                                  method: "resolu√ß√£o especial"
                                });
                              } else {
                                console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                // Continuar com a abordagem normal
                              }
                              
                              try {
                                // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                                if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                                  console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                                  
                                  // Usar a fun√ß√£o especializada para resolver o problema
                                  const resultado = await resolverUsuarioProblematico(userId, status, res);
                                  
                                  if (resultado.success) {
                                    return res.json({
                                      success: true,
                                      message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                      user: resultado.user,
                                      method: "resolu√ß√£o especial"
                                    });
                                  } else {
                                    console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                    // Continuar com a abordagem normal
                                  }
                                  
                                  try {
                                    // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                                    if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                                      console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                                      
                                      // Usar a fun√ß√£o especializada para resolver o problema
                                      const resultado = await resolverUsuarioProblematico(userId, status, res);
                                      
                                      if (resultado.success) {
                                        return res.json({
                                          success: true,
                                          message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                          user: resultado.user,
                                          method: "resolu√ß√£o especial"
                                        });
                                      } else {
                                        console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                        // Continuar com a abordagem normal
                                      }
                                      
                                      try {
                                        // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                                        if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                                          console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                                          
                                          // Usar a fun√ß√£o especializada para resolver o problema
                                          const resultado = await resolverUsuarioProblematico(userId, status, res);
                                          
                                          if (resultado.success) {
                                            return res.json({
                                              success: true,
                                              message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                              user: resultado.user,
                                              method: "resolu√ß√£o especial"
                                            });
                                          } else {
                                            console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                            // Continuar com a abordagem normal
                                          }
                                          
                                          try {
                                            // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                                            if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                                              console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                                              
                                              // Usar a fun√ß√£o especializada para resolver o problema
                                              const resultado = await resolverUsuarioProblematico(userId, status, res);
                                              
                                              if (resultado.success) {
                                                return res.json({
                                                  success: true,
                                                  message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                                  user: resultado.user,
                                                  method: "resolu√ß√£o especial"
                                                });
                                              } else {
                                                console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                                // Continuar com a abordagem normal
                                              }
                                              
                                              try {
                                                // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                                                if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                                                  console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                                                  
                                                  // Usar a fun√ß√£o especializada para resolver o problema
                                                  const resultado = await resolverUsuarioProblematico(userId, status, res);
                                                  
                                                  if (resultado.success) {
                                                    return res.json({
                                                      success: true,
                                                      message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                                      user: resultado.user,
                                                      method: "resolu√ß√£o especial"
                                                    });
                                                  } else {
                                                    console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                                    // Continuar com a abordagem normal
                                                  }
                                                  
                                                  try {
                                                    // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                                                    if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                                                      console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                                                      
                                                      // Usar a fun√ß√£o especializada para resolver o problema
                                                      const resultado = await resolverUsuarioProblematico(userId, status, res);
                                                      
                                                      if (resultado.success) {
                                                        return res.json({
                                                          success: true,
                                                          message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                                          user: resultado.user,
                                                          method: "resolu√ß√£o especial"
                                                        });
                                                      } else {
                                                        console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                                        // Continuar com a abordagem normal
                                                      }
                                                      
                                                      try {
                                                        // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                                                        if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                                                          console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                                                          
                                                          // Usar a fun√ß√£o especializada para resolver o problema
                                                          const resultado = await resolverUsuarioProblematico(userId, status, res);
                                                          
                                                          if (resultado.success) {
                                                            return res.json({
                                                              success: true,
                                                              message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                                              user: resultado.user,
                                                              method: "resolu√ß√£o especial"
                                                            });
                                                          } else {
                                                            console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                                            // Continuar com a abordagem normal
                                                          }
                                                          
                                                          try {
                                                            // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                                                            if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                                                              console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                                                              
                                                              // Usar a fun√ß√£o especializada para resolver o problema
                                                              const resultado = await resolverUsuarioProblematico(userId, status, res);
                                                              
                                                              if (resultado.success) {
                                                                return res.json({
                                                                  success: true,
                                                                  message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                                                  user: resultado.user,
                                                                  method: "resolu√ß√£o especial"
                                                                });
                                                              } else {
                                                                console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                                                // Continuar com a abordagem normal
                                                              }
                                                              
                                                              try {
                                                                // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                                                                if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                                                                  console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                                                                  
                                                                  // Usar a fun√ß√£o especializada para resolver o problema
                                                                  const resultado = await resolverUsuarioProblematico(userId, status, res);
                                                                  
                                                                  if (resultado.success) {
                                                                    return res.json({
                                                                      success: true,
                                                                      message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                                                      user: resultado.user,
                                                                      method: "resolu√ß√£o especial"
                                                                    });
                                                                  } else {
                                                                    console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                                                    // Continuar com a abordagem normal
                                                                  }
                                                                  
                                                                  try {
                                                                    // Adicionar uma verifica√ß√£o espec√≠fica para o ID problem√°tico
                                                                    if (userId === 'usr69a96806c5e72b8847a3524adb6fcc13') {
                                                                      console.log('‚ö†Ô∏è CASO ESPECIAL: ID problem√°tico detectado!');
                                                                      
                                                                      // Usar a fun√ß√£o especializada para resolver o problema
                                                                      const resultado = await resolverUsuarioProblematico(userId, status, res);
                                                                      
                                                                      if (resultado.success) {
                                                                        return res.json({
                                                                          success: true,
                                                                          message: `Status do usu√°rio ${userId} atualizado para ${status}`,
                                                                          user: resultado.user,
                                                                          method: "resolu√ß√£o especial"
                                                                        });
                                                                      } else {
                                                                        console.log(`‚ö†Ô∏è A solu√ß√£o especial falhou: ${resultado.message}`);
                                                                        // Continuar com a abordagem normal
                                                                      }
                                                                      
                                                                      try {
        console.log(`üîÑ Realizando atualiza√ß√£o adicional para garantir consist√™ncia para o ID problem√°tico`);
        
        // Tentar atualizar diretamente pelo phoneNumber se dispon√≠vel
        if (keyObj.phoneNumber) {
          await dynamoDB.update({
            TableName: USUARIOS_TABLE,
            Key: { phoneNumber: keyObj.phoneNumber },
            UpdateExpression: "SET #status = :status",
            ExpressionAttributeNames: { "#status": "status" },
            ExpressionAttributeValues: { ":status": newStatus }
          }).promise().then(() => {
            console.log(`‚úÖ Atualiza√ß√£o redundante via phoneNumber realizada com sucesso`);
          }).catch(err => {
            console.error(`‚ö†Ô∏è Atualiza√ß√£o redundante falhou:`, err);
          });
        }
        
        // Verificar se o campo de telefone est√° formatado corretamente
        if (keyObj.phoneNumber && !keyObj.phoneNumber.startsWith('+')) {
          const phoneWithPlus = `+${keyObj.phoneNumber}`;
          console.log(`Tentando formato alternativo de telefone: ${phoneWithPlus}`);
          
          await dynamoDB.update({
            TableName: USUARIOS_TABLE,
            Key: { phoneNumber: phoneWithPlus },
            UpdateExpression: "SET #status = :status",
            ExpressionAttributeNames: { "#status": "status" },
            ExpressionAttributeValues: { ":status": newStatus }
          }).promise().then(() => {
            console.log(`‚úÖ Atualiza√ß√£o com formato alternativo de telefone bem-sucedida`);
          }).catch(err => {
            console.log(`Formato alternativo de telefone tamb√©m falhou:`, err.message);
          });
        }
      }
    } catch (err) {
      console.error(`‚ö†Ô∏è Erro ao registrar log de status:`, err);
      await saveErrorLog(err);
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è Erro ao preparar log de status:`, error);
  }
}

// Fun√ß√£o para detectar a estrutura da chave prim√°ria de uma tabela
async function detectPrimaryKey(tableName) {
  try {
    const dynamoDBStandard = new AWS.DynamoDB();
    const tableData = await dynamoDBStandard.describeTable({
      TableName: tableName
    }).promise();
    
    if (tableData && tableData.Table && tableData.Table.KeySchema) {
      const partitionKey = tableData.Table.KeySchema.find(k => k.KeyType === 'HASH');
      const sortKey = tableData.Table.KeySchema.find(k => k.KeyType === 'RANGE');
      
      return {
        partitionKey: partitionKey ? partitionKey.AttributeName : null,
        sortKey: sortKey ? sortKey.AttributeName : null
      };
    }
  } catch (error) {
    console.error(`Erro ao detectar chave prim√°ria: ${error.message}`);
  }
  
  return { partitionKey: null, sortKey: null };
}

// ======== INICIALIZA√á√ÉO DO SERVIDOR ========

// Iniciar o servidor ap√≥s validar a conex√£o
async function startServer() {
  try {
    // Realizar valida√ß√£o inicial de conex√£o
    const connectionValid = await validateAwsConnection();
    
    if (!connectionValid) {
      console.warn(`
        ‚ö†Ô∏è AVISO: Problemas de conex√£o detectados, mas iniciando servidor mesmo assim.
        Alguns recursos podem n√£o funcionar corretamente. Verifique as mensagens acima.
      `);
    }
    
    // Inicie o servidor
    app.listen(PORT, () => {
      console.log('==========================================');
      console.log(`‚úÖ Servidor admin rodando na porta ${PORT}`);
      console.log(`üìä Painel dispon√≠vel em: http://localhost:${PORT}`);
      console.log('==========================================');
    });
  } catch (error) {
    console.error('‚ùå ERRO CR√çTICO ao iniciar servidor:', error);
    process.exit(1);
  }
}

// Iniciar o servidor
startServer(); 