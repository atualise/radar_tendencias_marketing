AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Radar de Tendências em Marketing Digital
  Sistema para fornecer insights, ferramentas e tendências de marketing via WhatsApp

# Parâmetros globais que podem ser modificados durante o deploy
Parameters:
  Environment:
    Type: String
    Default: prod
    Description: Ambiente de implantação (dev, test, prod)
    AllowedValues:
      - dev
      - test
      - prod
  
  ClaudeAPIKey:
    Type: String
    NoEcho: true
    Description: Chave da API da Claude (Anthropic)
  
  ClaudeApiUrl:
    Type: String
    Default: https://api.anthropic.com/v1/messages
    Description: URL da API Claude
  
  ClaudeModel:
    Type: String
    Default: claude-3-sonnet-20240229
    Description: Modelo Claude a ser utilizado
  
  DeepSeekApiUrl:
    Type: String
    Default: http://localhost:11434/api/generate
    Description: URL da API do Ollama para o modelo DeepSeek (ex. http://server-ip:11434/api/generate)
  
  DeepSeekModel:
    Type: String
    Default: deepseek-coder:33b
    Description: Nome do modelo DeepSeek no Ollama
  
  UseClaudeFallback:
    Type: String
    Default: "true"
    Description: Se deve usar Claude como fallback quando o DeepSeek falhar
    AllowedValues:
      - "true"
      - "false"
  
  WhatsAppAPIToken:
    Type: String
    NoEcho: true
    Description: Token da API do WhatsApp Business
  
  WhatsAppPhoneNumberId:
    Type: String
    Description: ID do número de telefone do WhatsApp Business

  WebhookVerifyToken:
    Type: String
    NoEcho: true
    Description: Token de verificação do webhook do WhatsApp

  WhatsAppAPIVersion:
    Type: String
    Description: Versão da API do WhatsApp
    Default: "v21.0"
  
  WhatsAppTokenParameterName:
    Type: String
    Description: Nome do parâmetro no SSM para armazenar o token do WhatsApp
    Default: "/whatsapp/token"
  
  WhatsAppTokenSecretName:
    Type: String
    Description: Nome do segredo no Secrets Manager para armazenar as credenciais do WhatsApp
    Default: "whatsapp/credentials"
    
  # Parâmetros para o domínio personalizado
  DomainName:
    Type: String
    Default: antena.atualise.com
    Description: Nome de domínio personalizado para a landing page
    
  CertificateArn:
    Type: String
    Description: ARN do certificado ACM para o domínio (deve ser na região us-east-1 para CloudFront)

# Configurações globais para as funções
Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: nodejs18.x
    Architectures: [x86_64]
    Environment:
      Variables:
        USERS_TABLE: !Ref UsersTable
        INTERACTIONS_TABLE: !Ref InteractionsTable
        CONTENTS_TABLE: !Ref ContentsTable
        SQS_RESPONSE_QUEUE_URL: !Ref ResponseQueue
        SQS_CONTENT_QUEUE_URL: !Ref ContentQueue
        WEBHOOK_VERIFY_TOKEN: !Ref WebhookVerifyToken
        CLAUDE_API_KEY: !Ref ClaudeAPIKey
        WHATSAPP_API_TOKEN: !Ref WhatsAppAPIToken
        WHATSAPP_PHONE_NUMBER_ID: !Ref WhatsAppPhoneNumberId
        TOKEN_PARAMETER_NAME: !Sub /antena/whatsapp/token-${Environment}
        TOKEN_SECRET_NAME: !Sub antena/whatsapp/credentials-${Environment}
  Api:
    Cors:
      AllowMethods: "'OPTIONS,POST,GET'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Origin,X-Requested-With,Accept'"
      AllowOrigin: "'*'"

Resources:
  # Tabelas DynamoDB
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Users-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: phoneNumber
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: PhoneNumberIndex
          KeySchema:
            - AttributeName: phoneNumber
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  InteractionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Interactions-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: interactionId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: interactionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserTimestampIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  ContentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Contents-${Environment}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: contentId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: contentId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserContentIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Filas SQS
  ResponseQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-Response-Queue-${Environment}
      VisibilityTimeout: 150
      MessageRetentionPeriod: 345600 # 4 dias
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ResponseDeadLetterQueue.Arn
        maxReceiveCount: 5

  # Definição da API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-API-${Environment}
      StageName: Prod
      # Configuração CORS atualizada para a API Gateway
      # Usando '*' como AllowOrigin para maior compatibilidade
      # Removido AllowCredentials pois não é compatível com AllowOrigin: '*'
      # Esta configuração é mais permissiva e resolve problemas de CORS em diversos browsers
      Cors:
        AllowMethods: "'OPTIONS,POST,GET'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Origin,X-Requested-With,Accept'"
        AllowOrigin: "'*'"

  ResponseDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-Response-DLQ-${Environment}
      MessageRetentionPeriod: 1209600 # 14 dias

  ContentQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-Content-Queue-${Environment}
      VisibilityTimeout: 300  # 5 minutos para geração de conteúdo
      MessageRetentionPeriod: 345600 # 4 dias
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ContentDeadLetterQueue.Arn
        maxReceiveCount: 3

  ContentDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${AWS::StackName}-Content-DLQ-${Environment}
      MessageRetentionPeriod: 1209600 # 14 dias

  # Funções Lambda
  # Gerenciador de Token do WhatsApp
  WhatsAppTokenManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-WhatsAppTokenManager-${Environment}
      CodeUri: src/whatsapp-token-manager/
      Handler: index.handler
      Description: Gerencia e atualiza tokens de acesso do WhatsApp
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          WHATSAPP_API_TOKEN: !Ref WhatsAppAPIToken
          WHATSAPP_PHONE_NUMBER_ID: !Ref WhatsAppPhoneNumberId
          TOKEN_PARAMETER_NAME: !Ref WhatsAppTokenParameterName
          TOKEN_SECRET_NAME: !Ref WhatsAppTokenSecretName
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:GetParameter
              Resource: 
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${WhatsAppTokenParameterName}
                - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${WhatsAppTokenParameterName}/*
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:PutSecretValue
                - secretsmanager:UpdateSecret
                - secretsmanager:CreateSecret
              Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${WhatsAppTokenSecretName}*

  # Regra para renovação automática do token
  TokenRefreshRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-TokenRefresh-${Environment}"
      Description: "Renovação automática do token do WhatsApp a cada 7 dias"
      ScheduleExpression: "rate(7 days)"
      State: ENABLED
      Targets:
        - Id: TokenRefreshTarget
          Arn: !GetAtt WhatsAppTokenManagerFunction.Arn

  # Permissão para o EventBridge acionar a função
  TokenRefreshRulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WhatsAppTokenManagerFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt TokenRefreshRule.Arn

  # Função para envio de mensagens WhatsApp
  WhatsAppSenderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-WhatsAppSender-${Environment}
      CodeUri: src/whatsapp-sender/
      Handler: index.handler
      Description: Função para enviar mensagens via WhatsApp Business API
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          WHATSAPP_API_TOKEN: !Ref WhatsAppAPIToken
          WHATSAPP_PHONE_NUMBER_ID: !Ref WhatsAppPhoneNumberId
          WHATSAPP_API_VERSION: !Ref WhatsAppAPIVersion
          TOKEN_MANAGER_LAMBDA: !GetAtt WhatsAppTokenManagerFunction.Arn
          TOKEN_PARAMETER_NAME: !Ref WhatsAppTokenParameterName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref InteractionsTable
        - LambdaInvokePolicy:
            FunctionName: !Ref WhatsAppTokenManagerFunction
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${WhatsAppTokenParameterName}"
        - Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"

  # Demais funções depois
  WhatsAppWebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-WhatsAppWebhook-${Environment}
      CodeUri: src/whatsapp-webhook/
      Handler: index.handler
      Description: Processa webhooks do WhatsApp e envia mensagens para a fila
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /webhook
            Method: any
            RestApiId: !Ref ApiGateway
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref InteractionsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ResponseQueue.QueueName

  ProcessadorLeadsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ProcessadorLeads-${Environment}
      CodeUri: src/processador-leads/
      Handler: index.handler
      Description: Processa leads capturados da landing page
      # Esta função inclui cabeçalhos CORS específicos na resposta
      # Os cabeçalhos são definidos para permitir a origem '*'
      # O frontend foi atualizado para NÃO usar credentials nas requisições fetch
      # garantindo compatibilidade com a configuração atual
      Environment:
        Variables:
          WHATSAPP_SENDER_FUNCTION: !GetAtt WhatsAppSenderFunction.Arn
          SQS_RESPONSE_QUEUE_URL: !Ref ResponseQueue
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /leads
            Method: post
            RestApiId: !Ref ApiGateway
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - LambdaInvokePolicy:
            FunctionName: !Ref WhatsAppSenderFunction
        - EventBridgePutEventsPolicy:
            EventBusName: default
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ResponseQueue.QueueName

  OrquestradorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-Orquestrador-${Environment}
      CodeUri: src/orquestrador/
      Handler: index.handler
      Description: Orquestra respostas baseado nas entradas da fila SQS
      MemorySize: 512
      Timeout: 60
      Environment:
        Variables:
          WHATSAPP_SENDER_FUNCTION: !GetAtt WhatsAppSenderFunction.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ResponseQueue.Arn
            BatchSize: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref InteractionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContentsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ContentQueue.QueueName
        - LambdaInvokePolicy:
            FunctionName: !Ref WhatsAppSenderFunction
        - Statement:
            - Effect: Allow
              Action:
                - cloudwatch:PutMetricData
              Resource: "*"

  GeradorConteudoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GeradorConteudo-${Environment}
      CodeUri: src/gerador-conteudo/
      Handler: index.handler
      Description: Gera respostas usando modelos DeepSeek e Claude
      MemorySize: 1024
      Timeout: 120
      Environment:
        Variables:
          WHATSAPP_SENDER_FUNCTION: !GetAtt WhatsAppSenderFunction.Arn
          DEEPSEEK_API_URL: !Ref DeepSeekApiUrl
          DEEPSEEK_MODEL: !Ref DeepSeekModel
          USE_CLAUDE_FALLBACK: !Ref UseClaudeFallback
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ContentQueue.Arn
            BatchSize: 5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref InteractionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContentsTable
        - LambdaInvokePolicy:
            FunctionName: !Ref WhatsAppSenderFunction

  # Bucket S3 para a landing page
  LandingPageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-landing-page-${Environment}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CloudFront Origin Access Identity para acessar o bucket S3
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI para ${AWS::StackName} landing page"

  # Política de bucket S3 atualizada para permitir acesso apenas via CloudFront
  LandingPageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LandingPageBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub arn:aws:s3:::${LandingPageBucket}/*
            
  # Distribuição CloudFront para a landing page
  LandingPageCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub ${LandingPageBucket}.s3.amazonaws.com
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        Enabled: true
        Comment: !Sub "Distribuição CloudFront para ${AWS::StackName} landing page"
        DefaultRootObject: index.html
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          MinTTL: 0
          DefaultTTL: 3600
          MaxTTL: 86400
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
        HttpVersion: http2
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            
  # As configurações do domínio personalizado para API Gateway foram removidas
  # O domínio personalizado será usado apenas para o CloudFront

Outputs:
  # URLs e ARNs importantes
  WebhookApiUrl:
    Description: URL do API Gateway para receber webhooks do WhatsApp
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/webhook
  
  # Outputs de domínio customizado removidos pois o domínio agora é apenas para CloudFront
  
  LeadsApiUrl:
    Description: URL do API Gateway para receber leads da landing page
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/leads

  LandingPageURL:
    Description: URL da landing page
    Value: !GetAtt LandingPageBucket.WebsiteURL

  CloudFrontURL:
    Description: URL da distribuição CloudFront com domínio personalizado
    Value: !Sub https://${DomainName}
    
  CloudFrontDistributionURL:
    Description: URL da distribuição CloudFront (domínio AWS)
    Value: !Sub https://${LandingPageCloudFrontDistribution.DomainName}

  UsersTableName:
    Description: Nome da tabela de usuários
    Value: !Ref UsersTable

  InteractionsTableName:
    Description: Nome da tabela de interações
    Value: !Ref InteractionsTable

  ContentsTableName:
    Description: Nome da tabela de conteúdos
    Value: !Ref ContentsTable

  ResponseQueueURL:
    Description: URL da fila de respostas
    Value: !Ref ResponseQueue

  ContentQueueURL:
    Description: URL da fila de geração de conteúdo
    Value: !Ref ContentQueue

  # Configurações de LLMs
  DeepSeekApiEndpoint:
    Description: URL para o endpoint Ollama com o modelo DeepSeek
    Value: !Ref DeepSeekApiUrl
    
  ClaudeApiEndpoint:
    Description: URL para o endpoint da API Claude
    Value: !Ref ClaudeApiUrl 